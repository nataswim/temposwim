<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Role; // ğŸ‡¬ğŸ‡§ Import Role model / ğŸ‡«ğŸ‡· Importer le modÃ¨le Role
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash; // ğŸ‡¬ğŸ‡§ For password hashing / ğŸ‡«ğŸ‡· Pour hasher le mot de passe

class UserController extends Controller
{
    /**
     * ğŸ‡¬ğŸ‡§ Display a listing of the resource.
     * ğŸ‡«ğŸ‡· Afficher la liste des utilisateurs.
     */
    public function index()
    {
        $users = User::all();
        return response()->json($users, 200);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Store a newly created resource in storage.
     * ğŸ‡«ğŸ‡· Enregistrer un nouvel utilisateur dans la base de donnÃ©es.
     */
    public function store(Request $request)
    {
        // ğŸ‡¬ğŸ‡§ Validate the user creation request
        // ğŸ‡«ğŸ‡· Valider la requÃªte de crÃ©ation d'utilisateur
        $validator = Validator::make($request->all(), [
            'username' => 'required|unique:users|max:255', // ğŸ‡¬ğŸ‡§ Must be unique / ğŸ‡«ğŸ‡· Doit Ãªtre unique
            'email' => 'required|email|unique:users|max:255', // ğŸ‡¬ğŸ‡§ Must be a valid and unique email / ğŸ‡«ğŸ‡· Doit Ãªtre un email valide et unique
            'password' => 'required|min:8', // ğŸ‡¬ğŸ‡§ Minimum 8 characters / ğŸ‡«ğŸ‡· Minimum 8 caractÃ¨res
            'first_name' => 'nullable|max:255', // ğŸ‡¬ğŸ‡§ Optional first name / ğŸ‡«ğŸ‡· PrÃ©nom facultatif
            'last_name' => 'nullable|max:255', // ğŸ‡¬ğŸ‡§ Optional last name / ğŸ‡«ğŸ‡· Nom de famille facultatif
            'role_id' => 'nullable|exists:roles,id', // ğŸ‡¬ğŸ‡§ Must reference a valid role / ğŸ‡«ğŸ‡· Doit rÃ©fÃ©rencer un rÃ´le valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $user = User::create([
            'username' => $request->input('username'),
            'email' => $request->input('email'),
            'password' => Hash::make($request->input('password')), // ğŸ‡¬ğŸ‡§ Hash the password / ğŸ‡«ğŸ‡· Hasher le mot de passe
            'first_name' => $request->input('first_name'),
            'last_name' => $request->input('last_name'),
            'role_id' => $request->input('role_id'),
        ]);

        return response()->json($user, 201);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Display the specified resource.
     * ğŸ‡«ğŸ‡· Afficher un utilisateur spÃ©cifique.
     */
    public function show(User $user)
    {
        return response()->json($user, 200);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Update the specified resource in storage.
     * ğŸ‡«ğŸ‡· Mettre Ã  jour un utilisateur existant.
     */
    public function update(Request $request, User $user)
    {
        // ğŸ‡¬ğŸ‡§ Validate the user update request
        // ğŸ‡«ğŸ‡· Valider la requÃªte de mise Ã  jour d'un utilisateur
        $validator = Validator::make($request->all(), [
            'username' => 'required|max:255|unique:users,username,' . $user->id, // ğŸ‡¬ğŸ‡§ Unique except for current user / ğŸ‡«ğŸ‡· Unique sauf pour l'utilisateur actuel
            'email' => 'required|email|max:255|unique:users,email,' . $user->id, // ğŸ‡¬ğŸ‡§ Email must be unique / ğŸ‡«ğŸ‡· L'email doit Ãªtre unique
            'first_name' => 'nullable|max:255', // ğŸ‡¬ğŸ‡§ Optional first name / ğŸ‡«ğŸ‡· PrÃ©nom facultatif
            'last_name' => 'nullable|max:255', // ğŸ‡¬ğŸ‡§ Optional last name / ğŸ‡«ğŸ‡· Nom de famille facultatif
            'role_id' => 'nullable|exists:roles,id', // ğŸ‡¬ğŸ‡§ Must reference a valid role / ğŸ‡«ğŸ‡· Doit rÃ©fÃ©rencer un rÃ´le valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $user->update([
            'username' => $request->input('username'),
            'email' => $request->input('email'),
            'first_name' => $request->input('first_name'),
            'last_name' => $request->input('last_name'),
            'role_id' => $request->input('role_id'),
        ]);

        // ğŸ‡¬ğŸ‡§ Handle password update if provided
        // ğŸ‡«ğŸ‡· GÃ©rer la modification du mot de passe si fourni
        if ($request->filled('password')) {
            $user->password = Hash::make($request->input('password'));
            $user->save();
        }

        return response()->json($user, 200);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Remove the specified resource from storage.
     * ğŸ‡«ğŸ‡· Supprimer un utilisateur spÃ©cifique de la base de donnÃ©es.
     */
    public function destroy(User $user)
    {
        $user->delete();
        return response()->json(null, 204);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get users by role.
     * ğŸ‡«ğŸ‡· RÃ©cupÃ©rer les utilisateurs par rÃ´le.
     */
    public function getUsersByRole(Role $role)
    {
        $users = $role->users; // ğŸ‡¬ğŸ‡§ Use relation defined in Role model / ğŸ‡«ğŸ‡· Utiliser la relation dÃ©finie dans le modÃ¨le Role
        return response()->json($users, 200);
    }
}
