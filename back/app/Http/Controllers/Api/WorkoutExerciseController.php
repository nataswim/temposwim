<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Workout;
use App\Models\Exercise;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class WorkoutExerciseController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the exercises for a given workout.
     * ðŸ‡«ðŸ‡· Afficher la liste des exercices associÃ©s Ã  une sÃ©ance d'entraÃ®nement donnÃ©e.
     */
    public function index(Workout $workout)
    {
        return response()->json($workout->exercises, 200);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Attach an exercise to a workout.
     * ðŸ‡«ðŸ‡· Associer un exercice Ã  une sÃ©ance d'entraÃ®nement.
     */
    public function store(Request $request, Workout $workout)
    {
        // ðŸ‡¬ðŸ‡§ Validate the request data
        // ðŸ‡«ðŸ‡· Valider les donnÃ©es de la requÃªte
        $validator = Validator::make($request->all(), [
            'exercise_id' => 'required|exists:exercises,id', // ðŸ‡¬ðŸ‡§ Must reference a valid exercise / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un exercice valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ðŸ‡¬ðŸ‡§ Check if the exercise is already attached
        // ðŸ‡«ðŸ‡· VÃ©rifier si l'exercice est dÃ©jÃ  associÃ©
        if ($workout->exercises()->where('exercise_id', $request->input('exercise_id'))->exists()) {
            return response()->json(['error' => 'Exercise already attached to this workout.'], 400);
        }

        $workout->exercises()->attach($request->input('exercise_id'));

        return response()->json(['message' => 'Exercise attached successfully.'], 201);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Display a specific exercise within a workout.
     * ðŸ‡«ðŸ‡· Afficher un exercice spÃ©cifique dans une sÃ©ance d'entraÃ®nement.
     */
    
    public function show(Workout $workout, Exercise $exercise)
    {
        // ðŸ‡¬ðŸ‡§ Check if the workout contains the exercise
        // ðŸ‡«ðŸ‡· VÃ©rifier si la sÃ©ance contient l'exercice
        if ($workout->exercises->contains($exercise)) {
            return response()->json($exercise, 200);
        } else {
            return response()->json(['message' => 'Exercise not found in workout.'], 404);
        }
    }

    /**
     * ðŸ‡¬ðŸ‡§ Detach an exercise from a workout.
     * ðŸ‡«ðŸ‡· DÃ©tacher un exercice d'une sÃ©ance d'entraÃ®nement.
     */

    public function destroy(Workout $workout, Exercise $exercise)
    {
        // ðŸ‡¬ðŸ‡§ Check if the association exists before detaching
        // ðŸ‡«ðŸ‡· VÃ©rifier si l'association existe avant de dÃ©tacher
        if (!$workout->exercises()->where('exercise_id', $exercise->id)->exists()) {
            return response()->json(['error' => 'Exercise is not attached to this workout.'], 400);
        }

        $workout->exercises()->detach($exercise->id);
        return response()->json(null, 204);
    }
}
