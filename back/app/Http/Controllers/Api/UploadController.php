<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Upload;
use App\Models\User; // ðŸ‡¬ðŸ‡§ Import User model / ðŸ‡«ðŸ‡· Importation du modÃ¨le User
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Storage; // ðŸ‡¬ðŸ‡§ For file management / ðŸ‡«ðŸ‡· Pour la gestion des fichiers

class UploadController extends Controller
{
    /**
     * ðŸ‡¬ðŸ‡§ Display a listing of the resource.
     * ðŸ‡«ðŸ‡· Afficher la liste des fichiers uploadÃ©s.
     */
    public function index()
    {
        $uploads = Upload::all();
        return response()->json($uploads, 200);
    }

    
    
    
    /**
     * ðŸ‡¬ðŸ‡§ Store a newly created resource in storage.
     * ðŸ‡«ðŸ‡· Enregistrer un nouveau fichier dans le stockage.
     */
    public function store(Request $request)
    {
        // ðŸ‡¬ðŸ‡§ Validate the upload request
        // ðŸ‡«ðŸ‡· Valider la requÃªte d'upload
        $validator = Validator::make($request->all(), [
            'filename' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Required file name / ðŸ‡«ðŸ‡· Nom de fichier requis
            'file' => 'required|file|mimes:jpeg,png,jpg,gif,pdf|max:2048', // ðŸ‡¬ðŸ‡§ Allowed file types / ðŸ‡«ðŸ‡· Types de fichiers autorisÃ©s
            'type' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Optional file type / ðŸ‡«ðŸ‡· Type de fichier facultatif
            'user_id' => 'nullable|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        // ðŸ‡¬ðŸ‡§ Check if a file is uploaded
        // ðŸ‡«ðŸ‡· VÃ©rifier si un fichier a Ã©tÃ© uploadÃ©
        if ($request->hasFile('file')) {
            $file = $request->file('file');
            $path = $file->store('uploads'); // ðŸ‡¬ðŸ‡§ Store file in "uploads" directory / ðŸ‡«ðŸ‡· Enregistrer le fichier dans le dossier "uploads"


            
            $upload = Upload::create([
                'filename' => $file->getClientOriginalName(), // ðŸ‡¬ðŸ‡§ Use original filename / ðŸ‡«ðŸ‡· Utiliser le nom de fichier original
                'path' => $path,
                'type' => $request->input('type'),
                'user_id' => $request->input('user_id'),
            ]);

            return response()->json($upload, 201);
        }

        return response()->json(['error' => 'No file uploaded'], 400); // ðŸ‡¬ðŸ‡§ No file found / ðŸ‡«ðŸ‡· Aucun fichier trouvÃ©
    }

    
    
    /**
     * ðŸ‡¬ðŸ‡§ Display the specified resource.
     * ðŸ‡«ðŸ‡· Afficher un fichier spÃ©cifique.
     */
    public function show(Upload $upload)
    {
        return response()->json($upload, 200);
    }

    
    
    /**
     * ðŸ‡¬ðŸ‡§ Update the specified resource in storage.
     * ðŸ‡«ðŸ‡· Mettre Ã  jour un fichier existant.
     */
    public function update(Request $request, Upload $upload)
    {
        // ðŸ‡¬ðŸ‡§ Validate the update request
        // ðŸ‡«ðŸ‡· Valider la requÃªte de mise Ã  jour
        $validator = Validator::make($request->all(), [
            'filename' => 'required|max:255', // ðŸ‡¬ðŸ‡§ Required filename / ðŸ‡«ðŸ‡· Nom de fichier requis
            'type' => 'nullable|max:255', // ðŸ‡¬ðŸ‡§ Optional type / ðŸ‡«ðŸ‡· Type facultatif
            'user_id' => 'nullable|exists:users,id', // ðŸ‡¬ðŸ‡§ Must reference a valid user / ðŸ‡«ðŸ‡· Doit rÃ©fÃ©rencer un utilisateur valide
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        $upload->update([
            'filename' => $request->input('filename'),
            'type' => $request->input('type'),
            'user_id' => $request->input('user_id'),
        ]);

        return response()->json($upload, 200);
    }

    
    
    /**
     * ðŸ‡¬ðŸ‡§ Remove the specified resource from storage.
     * ðŸ‡«ðŸ‡· Supprimer un fichier spÃ©cifique du stockage.
     */
    public function destroy(Upload $upload)
    {
        // ðŸ‡¬ðŸ‡§ Delete the physical file
        // ðŸ‡«ðŸ‡· Supprimer le fichier physique
        Storage::delete($upload->path);
        $upload->delete();
        return response()->json(null, 204);
    }

   
   
    /**
     * ðŸ‡¬ðŸ‡§ Get uploads by user.
     * ðŸ‡«ðŸ‡· RÃ©cupÃ©rer les fichiers uploadÃ©s par un utilisateur spÃ©cifique.
     */
    public function getUserUploads(User $user)
    {
        $uploads = $user->uploads; // ðŸ‡¬ðŸ‡§ Use relation defined in User model / ðŸ‡«ðŸ‡· Utiliser la relation dÃ©finie dans le modÃ¨le User
        return response()->json($uploads, 200);
    }
}
