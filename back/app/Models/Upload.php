<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * ğŸ‡¬ğŸ‡§ Upload model representing a file uploaded by a user.
 * ğŸ‡«ğŸ‡· ModÃ¨le Upload reprÃ©sentant un fichier tÃ©lÃ©versÃ© par un utilisateur.
 */

class Upload extends Model
{
    use HasFactory;

    /**
     * ğŸ‡¬ğŸ‡§ The attributes that are mass assignable.
     * ğŸ‡«ğŸ‡· Les attributs qui peuvent Ãªtre assignÃ©s en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'filename', // ğŸ‡¬ğŸ‡§ File name / ğŸ‡«ğŸ‡· Nom du fichier
        'path', // ğŸ‡¬ğŸ‡§ File storage path / ğŸ‡«ğŸ‡· Chemin de stockage du fichier
        'type', // ğŸ‡¬ğŸ‡§ File type (image, document, etc.) / ğŸ‡«ğŸ‡· Type de fichier (image, document, etc.)
        'user_id', // ğŸ‡¬ğŸ‡§ ID of the user who uploaded the file / ğŸ‡«ğŸ‡· ID de l'utilisateur qui a tÃ©lÃ©versÃ© le fichier
    ];

    /**
     * ğŸ‡¬ğŸ‡§ The attributes that should be cast.
     * ğŸ‡«ğŸ‡· Les attributs qui doivent Ãªtre typÃ©s.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
    ];

    /**
     * ğŸ‡¬ğŸ‡§ Get the user that uploaded the file.
     * ğŸ‡«ğŸ‡· RÃ©cupÃ©rer l'utilisateur qui a tÃ©lÃ©versÃ© le fichier.
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get the exercises associated with this upload.
     * ğŸ‡«ğŸ‡· RÃ©cupÃ©rer les exercices associÃ©s Ã  ce fichier.
     */
    public function exercises()
    {
        return $this->hasMany(Exercise::class);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get the pages associated with this upload.
     * ğŸ‡«ğŸ‡· RÃ©cupÃ©rer les pages associÃ©es Ã  ce fichier.
     */
    public function pages()
    {
        return $this->hasMany(Page::class);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get all uploads for a given user.
     * ğŸ‡«ğŸ‡· RÃ©cupÃ©rer tous les fichiers tÃ©lÃ©versÃ©s par un utilisateur donnÃ©.
     *
     * Correction Suite erreur sur Postman :: getUserUploads utilise la relation uploads() de User.
     */
    public function getUserUploads(User $user)
    {
        $uploads = $user->uploads;
        return response()->json($uploads, 200);
    }
}
