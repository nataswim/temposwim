<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * ğŸ‡¬ğŸ‡§ Migration to create the "users" table, along with "password_reset_tokens" and "sessions" tables.
 * ğŸ‡«ğŸ‡· Migration pour crÃ©er la table "users", ainsi que les tables "password_reset_tokens" et "sessions".
 */
return new class extends Migration
{
    /**
     * ğŸ‡¬ğŸ‡§ Run the migrations.
     * ğŸ‡«ğŸ‡· ExÃ©cuter la migration.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (auto-increment).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (auto-incrÃ©mentÃ©e).
            $table->id();

            // ğŸ‡¬ğŸ‡§ Unique username (nullable).
            // ğŸ‡«ğŸ‡· Nom d'utilisateur unique (nullable).
            $table->string('username')->unique()->nullable();

            // ğŸ‡¬ğŸ‡§ First name (nullable).
            // ğŸ‡«ğŸ‡· PrÃ©nom (nullable).
            $table->string('first_name')->nullable();

            // ğŸ‡¬ğŸ‡§ Last name (nullable).
            // ğŸ‡«ğŸ‡· Nom de famille (nullable).
            $table->string('last_name')->nullable();

            // ğŸ‡¬ğŸ‡§ Email (unique).
            // ğŸ‡«ğŸ‡· Adresse e-mail (unique).
            $table->string('email')->unique();

            // ğŸ‡¬ğŸ‡§ Email verification timestamp (nullable).
            // ğŸ‡«ğŸ‡· Date de vÃ©rification de l'e-mail (nullable).
            $table->timestamp('email_verified_at')->nullable();

            // ğŸ‡¬ğŸ‡§ Password.
            // ğŸ‡«ğŸ‡· Mot de passe.
            $table->string('password');

            // ğŸ‡¬ğŸ‡§ Token for "Remember Me" functionality.
            // ğŸ‡«ğŸ‡· Token pour la fonctionnalitÃ© "Se souvenir de moi".
            $table->rememberToken();

            // ğŸ‡¬ğŸ‡§ Foreign key referencing "roles" table (nullable, sets to null on delete).
            // ğŸ‡«ğŸ‡· ClÃ© Ã©trangÃ¨re vers la table "roles" (nullable, mise Ã  null en cas de suppression).
            $table->foreignId('role_id')->nullable()->constrained('roles')->onDelete('set null');

            // ğŸ‡¬ğŸ‡§ Timestamps (created_at, updated_at).
            // ğŸ‡«ğŸ‡· Horodatage (created_at, updated_at).
            $table->timestamps();
        });

        /**
         * ğŸ‡¬ğŸ‡§ Create the "password_reset_tokens" table.
         * ğŸ‡«ğŸ‡· CrÃ©ation de la table "password_reset_tokens".
         */
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (email).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (email).
            $table->string('email')->primary();

            // ğŸ‡¬ğŸ‡§ Reset token.
            // ğŸ‡«ğŸ‡· Token de rÃ©initialisation.
            $table->string('token');

            // ğŸ‡¬ğŸ‡§ Timestamp of token creation (nullable).
            // ğŸ‡«ğŸ‡· Date de crÃ©ation du token (nullable).
            $table->timestamp('created_at')->nullable();
        });

        /**
         * ğŸ‡¬ğŸ‡§ Create the "sessions" table.
         * ğŸ‡«ğŸ‡· CrÃ©ation de la table "sessions".
         */
        Schema::create('sessions', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (session ID).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (ID de session).
            $table->string('id')->primary();

            // ğŸ‡¬ğŸ‡§ Foreign key referencing "users" table (nullable).
            // ğŸ‡«ğŸ‡· ClÃ© Ã©trangÃ¨re vers la table "users" (nullable).
            $table->foreignId('user_id')->nullable()->index();

            // ğŸ‡¬ğŸ‡§ IP address of the user (optional, max 45 characters).
            // ğŸ‡«ğŸ‡· Adresse IP de l'utilisateur (optionnelle, max 45 caractÃ¨res).
            $table->string('ip_address', 45)->nullable();

            // ğŸ‡¬ğŸ‡§ User agent (browser/device details).
            // ğŸ‡«ğŸ‡· Agent utilisateur (dÃ©tails du navigateur/appareil).
            $table->text('user_agent')->nullable();

            // ğŸ‡¬ğŸ‡§ Session data (payload).
            // ğŸ‡«ğŸ‡· DonnÃ©es de session (payload).
            $table->longText('payload');

            // ğŸ‡¬ğŸ‡§ Last activity timestamp.
            // ğŸ‡«ğŸ‡· Horodatage de la derniÃ¨re activitÃ©.
            $table->integer('last_activity')->index();
        });
    }

    /**
     * ğŸ‡¬ğŸ‡§ Reverse the migrations.
     * ğŸ‡«ğŸ‡· Annuler la migration.
     */
    public function down(): void
    {
        // ğŸ‡¬ğŸ‡§ Drop "users" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "users".
        Schema::dropIfExists('users');

        // ğŸ‡¬ğŸ‡§ Drop "password_reset_tokens" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "password_reset_tokens".
        Schema::dropIfExists('password_reset_tokens');

        // ğŸ‡¬ğŸ‡§ Drop "sessions" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "sessions".
        Schema::dropIfExists('sessions');
    }
};
