<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * ğŸ‡¬ğŸ‡§ Migration to create job-related tables: "jobs", "job_batches", and "failed_jobs".
 * ğŸ‡«ğŸ‡· Migration pour crÃ©er les tables liÃ©es aux tÃ¢ches: "jobs", "job_batches" et "failed_jobs".
 */
return new class extends Migration
{
    /**
     * ğŸ‡¬ğŸ‡§ Run the migrations.
     * ğŸ‡«ğŸ‡· ExÃ©cuter la migration.
     */
    public function up(): void
    {
        /**
         * ğŸ‡¬ğŸ‡§ Create the "jobs" table for managing queued jobs.
         * ğŸ‡«ğŸ‡· CrÃ©ation de la table "jobs" pour gÃ©rer les tÃ¢ches en file d'attente.
         */
        Schema::create('jobs', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (auto-increment).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (auto-incrÃ©mentÃ©e).
            $table->id();

            // ğŸ‡¬ğŸ‡§ Queue name (indexed).
            // ğŸ‡«ğŸ‡· Nom de la file d'attente (indexÃ©).
            $table->string('queue')->index();

            // ğŸ‡¬ğŸ‡§ Serialized job payload.
            // ğŸ‡«ğŸ‡· Charge utile sÃ©rialisÃ©e de la tÃ¢che.
            $table->longText('payload');

            // ğŸ‡¬ğŸ‡§ Number of attempts made to process the job.
            // ğŸ‡«ğŸ‡· Nombre de tentatives pour traiter la tÃ¢che.
            $table->unsignedTinyInteger('attempts');

            // ğŸ‡¬ğŸ‡§ Timestamp when the job was reserved (nullable).
            // ğŸ‡«ğŸ‡· Horodatage lorsque la tÃ¢che a Ã©tÃ© rÃ©servÃ©e (nullable).
            $table->unsignedInteger('reserved_at')->nullable();

            // ğŸ‡¬ğŸ‡§ Timestamp when the job becomes available.
            // ğŸ‡«ğŸ‡· Horodatage lorsque la tÃ¢che devient disponible.
            $table->unsignedInteger('available_at');

            // ğŸ‡¬ğŸ‡§ Timestamp when the job was created.
            // ğŸ‡«ğŸ‡· Horodatage lorsque la tÃ¢che a Ã©tÃ© crÃ©Ã©e.
            $table->unsignedInteger('created_at');
        });

        /**
         * ğŸ‡¬ğŸ‡§ Create the "job_batches" table for tracking batch jobs.
         * ğŸ‡«ğŸ‡· CrÃ©ation de la table "job_batches" pour suivre les lots de tÃ¢ches.
         */
        Schema::create('job_batches', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (batch ID).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (ID du lot).
            $table->string('id')->primary();

            // ğŸ‡¬ğŸ‡§ Batch name.
            // ğŸ‡«ğŸ‡· Nom du lot de tÃ¢ches.
            $table->string('name');

            // ğŸ‡¬ğŸ‡§ Total jobs in the batch.
            // ğŸ‡«ğŸ‡· Nombre total de tÃ¢ches dans le lot.
            $table->integer('total_jobs');

            // ğŸ‡¬ğŸ‡§ Number of pending jobs.
            // ğŸ‡«ğŸ‡· Nombre de tÃ¢ches en attente.
            $table->integer('pending_jobs');

            // ğŸ‡¬ğŸ‡§ Number of failed jobs.
            // ğŸ‡«ğŸ‡· Nombre de tÃ¢ches Ã©chouÃ©es.
            $table->integer('failed_jobs');

            // ğŸ‡¬ğŸ‡§ IDs of failed jobs.
            // ğŸ‡«ğŸ‡· Identifiants des tÃ¢ches Ã©chouÃ©es.
            $table->longText('failed_job_ids');

            // ğŸ‡¬ğŸ‡§ Additional batch options (nullable).
            // ğŸ‡«ğŸ‡· Options supplÃ©mentaires pour le lot (nullable).
            $table->mediumText('options')->nullable();

            // ğŸ‡¬ğŸ‡§ Timestamp when the batch was cancelled (nullable).
            // ğŸ‡«ğŸ‡· Horodatage lorsque le lot a Ã©tÃ© annulÃ© (nullable).
            $table->integer('cancelled_at')->nullable();

            // ğŸ‡¬ğŸ‡§ Timestamp when the batch was created.
            // ğŸ‡«ğŸ‡· Horodatage lorsque le lot a Ã©tÃ© crÃ©Ã©.
            $table->integer('created_at');

            // ğŸ‡¬ğŸ‡§ Timestamp when the batch was finished (nullable).
            // ğŸ‡«ğŸ‡· Horodatage lorsque le lot a Ã©tÃ© terminÃ© (nullable).
            $table->integer('finished_at')->nullable();
        });

        /**
         * ğŸ‡¬ğŸ‡§ Create the "failed_jobs" table for storing failed job details.
         * ğŸ‡«ğŸ‡· CrÃ©ation de la table "failed_jobs" pour stocker les dÃ©tails des tÃ¢ches Ã©chouÃ©es.
         */
        Schema::create('failed_jobs', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (auto-increment).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (auto-incrÃ©mentÃ©e).
            $table->id();

            // ğŸ‡¬ğŸ‡§ Unique job UUID.
            // ğŸ‡«ğŸ‡· UUID unique de la tÃ¢che.
            $table->string('uuid')->unique();

            // ğŸ‡¬ğŸ‡§ Connection name where the job was executed.
            // ğŸ‡«ğŸ‡· Nom de la connexion oÃ¹ la tÃ¢che a Ã©tÃ© exÃ©cutÃ©e.
            $table->text('connection');

            // ğŸ‡¬ğŸ‡§ Queue name.
            // ğŸ‡«ğŸ‡· Nom de la file d'attente.
            $table->text('queue');

            // ğŸ‡¬ğŸ‡§ Serialized job payload.
            // ğŸ‡«ğŸ‡· Charge utile sÃ©rialisÃ©e de la tÃ¢che.
            $table->longText('payload');

            // ğŸ‡¬ğŸ‡§ Exception message for the failed job.
            // ğŸ‡«ğŸ‡· Message d'exception pour la tÃ¢che Ã©chouÃ©e.
            $table->longText('exception');

            // ğŸ‡¬ğŸ‡§ Timestamp when the job failed.
            // ğŸ‡«ğŸ‡· Horodatage lorsque la tÃ¢che a Ã©chouÃ©.
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * ğŸ‡¬ğŸ‡§ Reverse the migrations.
     * ğŸ‡«ğŸ‡· Annuler la migration.
     */
    public function down(): void
    {
        // ğŸ‡¬ğŸ‡§ Drop the "jobs" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "jobs".
        Schema::dropIfExists('jobs');

        // ğŸ‡¬ğŸ‡§ Drop the "job_batches" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "job_batches".
        Schema::dropIfExists('job_batches');

        // ğŸ‡¬ğŸ‡§ Drop the "failed_jobs" table.
        // ğŸ‡«ğŸ‡· Supprimer la table "failed_jobs".
        Schema::dropIfExists('failed_jobs');
    }
};
