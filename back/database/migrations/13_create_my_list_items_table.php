<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * ğŸ‡¬ğŸ‡§ Migration to create the "mylist_items" table.
 * ğŸ‡«ğŸ‡· Migration pour crÃ©er la table "mylist_items".
 */
return new class extends Migration
{
    /**
     * ğŸ‡¬ğŸ‡§ Run the migrations.
     * ğŸ‡«ğŸ‡· ExÃ©cuter la migration.
     */
    public function up(): void
    {
        Schema::create('mylist_items', function (Blueprint $table) {
            // ğŸ‡¬ğŸ‡§ Primary key (auto-increment).
            // ğŸ‡«ğŸ‡· ClÃ© primaire (auto-incrÃ©mentÃ©e).
            $table->bigIncrements('id');

            // ğŸ‡¬ğŸ‡§ Foreign key referencing "mylist" table.
            // ğŸ‡«ğŸ‡· ClÃ© Ã©trangÃ¨re faisant rÃ©fÃ©rence Ã  la table "mylist".
            $table->foreignId('mylist_id')->constrained('mylist')->onDelete('cascade');

            // ğŸ‡¬ğŸ‡§ Polymorphic relationship: ID of the associated item.
            // ğŸ‡«ğŸ‡· Relation polymorphique : ID de l'Ã©lÃ©ment associÃ©.
            $table->bigInteger('item_id');

            // ğŸ‡¬ğŸ‡§ Polymorphic relationship: Type of the associated item.
            // ğŸ‡«ğŸ‡· Relation polymorphique : Type de l'Ã©lÃ©ment associÃ©.
            $table->string('item_type');

            // ğŸ‡¬ğŸ‡§ Timestamps (created_at, updated_at).
            // ğŸ‡«ğŸ‡· Horodatage (created_at, updated_at).
            $table->timestamps();
        });
    }

    /**
     * ğŸ‡¬ğŸ‡§ Reverse the migrations.
     * ğŸ‡«ğŸ‡· Annuler la migration.
     */
    public function down(): void
    {
        Schema::dropIfExists('mylist_items');
    }
};
