{"ast":null,"code":"// api.js - Service API amélioré avec meilleure gestion des erreurs\nimport axios from 'axios';\nimport errorLogger from './errorLogger'; // Importer le service de journalisation\n\n// Configurer l'URL de base pour toutes les requêtes\n// Ici, nous utilisons l'URL de base sans le préfixe 'api' car il sera ajouté dans les requêtes\nconst baseURL = 'http://127.0.0.1:8000'; // Sans '/api' à la fin\n\n// Créer une instance axios avec la configuration par défaut\nconst instance = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important pour les cookies/session\n});\n\n/**\n * Vérifier si l'erreur est due à une déconnexion réseau\n * @param {Error} error - L'erreur à vérifier\n * @returns {boolean} - True si offline, false sinon\n */\nconst isOfflineError = error => {\n  return !window.navigator.onLine || error.message === 'Network Error';\n};\n\n/**\n * Gérer les erreurs liées à la déconnexion\n */\nconst handleOfflineError = () => {\n  // Afficher une alerte ou rediriger vers une page dédiée\n  // Si vous avez un contexte UI, vous pouvez l'utiliser ici\n  console.log('Vous êtes actuellement hors ligne. Veuillez vérifier votre connexion internet.');\n\n  // Option: Rediriger vers une page d'erreur offline\n  // window.location.href = '/offline';\n};\n\n// Intercepteur pour les requêtes\ninstance.interceptors.request.use(config => {\n  // Récupérer le token JWT stocké\n  const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n\n  // Ajouter le token à l'en-tête Authorization si disponible\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log(`Requête API: ${config.method.toUpperCase()} ${baseURL}${config.url}`);\n  return config;\n}, error => {\n  var _error$config;\n  // Journaliser l'erreur de requête\n  errorLogger.error(error, {\n    type: 'request_error',\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n  console.error('Erreur dans la requête API:', error);\n  return Promise.reject(error);\n});\n\n// Intercepteur pour les réponses\ninstance.interceptors.response.use(response => {\n  console.log(`Réponse API: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response, _error$config2, _error$response2, _error$response3, _error$config3, _error$response4, _error$response$data, _error$response$data$;\n  // Vérifier si l'erreur est due à une déconnexion\n  if (isOfflineError(error)) {\n    handleOfflineError();\n    return Promise.reject(error);\n  }\n\n  // Journaliser l'erreur avec le service de journalisation\n  errorLogger.error(error, {\n    type: 'response_error',\n    status: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'N/A',\n    url: ((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url) || 'N/A',\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  console.error('Erreur API:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) || 'N/A', ((_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.url) || 'N/A', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n\n  // Redirection basée sur le code d'erreur (window.location pour forcer un rechargement)\n  if (error.response) {\n    switch (error.response.status) {\n      case 404:\n        window.location.href = '/404';\n        break;\n      case 403:\n        window.location.href = '/403';\n        break;\n      case 401:\n        // Vérifier si le token est expiré ou invalide via la réponse\n        if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && (_error$response$data$ = _error$response$data.message) !== null && _error$response$data$ !== void 0 && _error$response$data$.includes('token')) {\n          // Nettoyer les données d'authentification\n          localStorage.removeItem('token');\n          sessionStorage.removeItem('token');\n          // Rediriger vers la page de connexion avec un message\n          window.location.href = '/login?session=expired';\n        } else {\n          window.location.href = '/401';\n        }\n        break;\n      case 500:\n        window.location.href = '/500';\n        break;\n      case 504:\n        window.location.href = '/504';\n        break;\n      case 503:\n        // Service indisponible, rediriger vers la page de maintenance\n        window.location.href = '/maintenance';\n        break;\n      default:\n        // Pour les autres erreurs, vous pouvez choisir de les gérer autrement\n        break;\n    }\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","errorLogger","baseURL","instance","create","headers","withCredentials","isOfflineError","error","window","navigator","onLine","message","handleOfflineError","console","log","interceptors","request","use","config","token","localStorage","getItem","sessionStorage","method","toUpperCase","url","_error$config","type","Promise","reject","response","status","_error$response","_error$config2","_error$response2","_error$response3","_error$config3","_error$response4","_error$response$data","_error$response$data$","data","location","href","includes","removeItem"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/services/api.js"],"sourcesContent":["// api.js - Service API amélioré avec meilleure gestion des erreurs\nimport axios from 'axios';\nimport errorLogger from './errorLogger'; // Importer le service de journalisation\n\n// Configurer l'URL de base pour toutes les requêtes\n// Ici, nous utilisons l'URL de base sans le préfixe 'api' car il sera ajouté dans les requêtes\nconst baseURL = 'http://127.0.0.1:8000'; // Sans '/api' à la fin\n\n// Créer une instance axios avec la configuration par défaut\nconst instance = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important pour les cookies/session\n});\n\n/**\n * Vérifier si l'erreur est due à une déconnexion réseau\n * @param {Error} error - L'erreur à vérifier\n * @returns {boolean} - True si offline, false sinon\n */\nconst isOfflineError = (error) => {\n  return !window.navigator.onLine || error.message === 'Network Error';\n};\n\n/**\n * Gérer les erreurs liées à la déconnexion\n */\nconst handleOfflineError = () => {\n  // Afficher une alerte ou rediriger vers une page dédiée\n  // Si vous avez un contexte UI, vous pouvez l'utiliser ici\n  console.log('Vous êtes actuellement hors ligne. Veuillez vérifier votre connexion internet.');\n  \n  // Option: Rediriger vers une page d'erreur offline\n  // window.location.href = '/offline';\n};\n\n// Intercepteur pour les requêtes\ninstance.interceptors.request.use(\n  config => {\n    // Récupérer le token JWT stocké\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    \n    // Ajouter le token à l'en-tête Authorization si disponible\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    console.log(`Requête API: ${config.method.toUpperCase()} ${baseURL}${config.url}`);\n    return config;\n  },\n  error => {\n    // Journaliser l'erreur de requête\n    errorLogger.error(error, { type: 'request_error', url: error.config?.url });\n    console.error('Erreur dans la requête API:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour les réponses\ninstance.interceptors.response.use(\n  response => {\n    console.log(`Réponse API: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  error => {\n    // Vérifier si l'erreur est due à une déconnexion\n    if (isOfflineError(error)) {\n      handleOfflineError();\n      return Promise.reject(error);\n    }\n    \n    // Journaliser l'erreur avec le service de journalisation\n    errorLogger.error(error, {\n      type: 'response_error', \n      status: error.response?.status || 'N/A',\n      url: error.config?.url || 'N/A',\n      data: error.response?.data\n    });\n    \n    console.error('Erreur API:', \n      error.response?.status || 'N/A', \n      error.config?.url || 'N/A',\n      error.response?.data || error.message\n    );\n    \n    // Redirection basée sur le code d'erreur (window.location pour forcer un rechargement)\n    if (error.response) {\n      switch (error.response.status) {\n        case 404:\n          window.location.href = '/404';\n          break;\n        case 403:\n          window.location.href = '/403';\n          break;\n        case 401:\n          // Vérifier si le token est expiré ou invalide via la réponse\n          if (error.response.data?.message?.includes('token')) {\n            // Nettoyer les données d'authentification\n            localStorage.removeItem('token');\n            sessionStorage.removeItem('token');\n            // Rediriger vers la page de connexion avec un message\n            window.location.href = '/login?session=expired';\n          } else {\n            window.location.href = '/401';\n          }\n          break;\n        case 500:\n          window.location.href = '/500';\n          break;\n        case 504:\n          window.location.href = '/504';\n          break;\n        case 503:\n          // Service indisponible, rediriger vers la page de maintenance\n          window.location.href = '/maintenance';\n          break;\n        default:\n          // Pour les autres erreurs, vous pouvez choisir de les gérer autrement\n          break;\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default instance;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;;AAEzC;AACA;AACA,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC5BF,OAAO;EACPG,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ,CAAC;EACDC,eAAe,EAAE,IAAI,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAChC,OAAO,CAACC,MAAM,CAACC,SAAS,CAACC,MAAM,IAAIH,KAAK,CAACI,OAAO,KAAK,eAAe;AACtE,CAAC;;AAED;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,gFAAgF,CAAC;;EAE7F;EACA;AACF,CAAC;;AAED;AACAZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAI;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC;;EAE9E;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACd,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUe,KAAK,EAAE;EACrD;EAEAN,OAAO,CAACC,GAAG,CAAC,gBAAgBI,MAAM,CAACK,MAAM,CAACC,WAAW,CAAC,CAAC,IAAIvB,OAAO,GAAGiB,MAAM,CAACO,GAAG,EAAE,CAAC;EAClF,OAAOP,MAAM;AACf,CAAC,EACDX,KAAK,IAAI;EAAA,IAAAmB,aAAA;EACP;EACA1B,WAAW,CAACO,KAAK,CAACA,KAAK,EAAE;IAAEoB,IAAI,EAAE,eAAe;IAAEF,GAAG,GAAAC,aAAA,GAAEnB,KAAK,CAACW,MAAM,cAAAQ,aAAA,uBAAZA,aAAA,CAAcD;EAAI,CAAC,CAAC;EAC3EZ,OAAO,CAACN,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACnD,OAAOqB,OAAO,CAACC,MAAM,CAACtB,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAL,QAAQ,CAACa,YAAY,CAACe,QAAQ,CAACb,GAAG,CAChCa,QAAQ,IAAI;EACVjB,OAAO,CAACC,GAAG,CAAC,gBAAgBgB,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACZ,MAAM,CAACO,GAAG,EAAE,CAAC;EACrE,OAAOK,QAAQ;AACjB,CAAC,EACDvB,KAAK,IAAI;EAAA,IAAAyB,eAAA,EAAAC,cAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,cAAA,EAAAC,gBAAA,EAAAC,oBAAA,EAAAC,qBAAA;EACP;EACA,IAAIjC,cAAc,CAACC,KAAK,CAAC,EAAE;IACzBK,kBAAkB,CAAC,CAAC;IACpB,OAAOgB,OAAO,CAACC,MAAM,CAACtB,KAAK,CAAC;EAC9B;;EAEA;EACAP,WAAW,CAACO,KAAK,CAACA,KAAK,EAAE;IACvBoB,IAAI,EAAE,gBAAgB;IACtBI,MAAM,EAAE,EAAAC,eAAA,GAAAzB,KAAK,CAACuB,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBD,MAAM,KAAI,KAAK;IACvCN,GAAG,EAAE,EAAAQ,cAAA,GAAA1B,KAAK,CAACW,MAAM,cAAAe,cAAA,uBAAZA,cAAA,CAAcR,GAAG,KAAI,KAAK;IAC/Be,IAAI,GAAAN,gBAAA,GAAE3B,KAAK,CAACuB,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBM;EACxB,CAAC,CAAC;EAEF3B,OAAO,CAACN,KAAK,CAAC,aAAa,EACzB,EAAA4B,gBAAA,GAAA5B,KAAK,CAACuB,QAAQ,cAAAK,gBAAA,uBAAdA,gBAAA,CAAgBJ,MAAM,KAAI,KAAK,EAC/B,EAAAK,cAAA,GAAA7B,KAAK,CAACW,MAAM,cAAAkB,cAAA,uBAAZA,cAAA,CAAcX,GAAG,KAAI,KAAK,EAC1B,EAAAY,gBAAA,GAAA9B,KAAK,CAACuB,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBG,IAAI,KAAIjC,KAAK,CAACI,OAChC,CAAC;;EAED;EACA,IAAIJ,KAAK,CAACuB,QAAQ,EAAE;IAClB,QAAQvB,KAAK,CAACuB,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACNvB,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,MAAM;QAC7B;MACF,KAAK,GAAG;QACNlC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,MAAM;QAC7B;MACF,KAAK,GAAG;QACN;QACA,KAAAJ,oBAAA,GAAI/B,KAAK,CAACuB,QAAQ,CAACU,IAAI,cAAAF,oBAAA,gBAAAC,qBAAA,GAAnBD,oBAAA,CAAqB3B,OAAO,cAAA4B,qBAAA,eAA5BA,qBAAA,CAA8BI,QAAQ,CAAC,OAAO,CAAC,EAAE;UACnD;UACAvB,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;UAChCtB,cAAc,CAACsB,UAAU,CAAC,OAAO,CAAC;UAClC;UACApC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,wBAAwB;QACjD,CAAC,MAAM;UACLlC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,MAAM;QAC/B;QACA;MACF,KAAK,GAAG;QACNlC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,MAAM;QAC7B;MACF,KAAK,GAAG;QACNlC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,MAAM;QAC7B;MACF,KAAK,GAAG;QACN;QACAlC,MAAM,CAACiC,QAAQ,CAACC,IAAI,GAAG,cAAc;QACrC;MACF;QACE;QACA;IACJ;EACF;EAEA,OAAOd,OAAO,CAACC,MAAM,CAACtB,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeL,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}