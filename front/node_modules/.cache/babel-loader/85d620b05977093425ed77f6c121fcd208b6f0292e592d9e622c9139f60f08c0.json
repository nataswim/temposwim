{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/routes/PrivateRoute.jsx\",\n  _s = $RefreshSig$();\n/**\n * üá¨üáß Private route component that redirects unauthenticated users to error page 401\n * üá´üá∑ Composant de route priv√©e qui redirige les utilisateurs non authentifi√©s vers la page d'erreur 401\n */\nimport { Outlet, Navigate, useLocation } from \"react-router-dom\";\nimport useAuth from \"../hooks/useAuth\";\n\n/**\n * üá¨üáß PrivateRoute - Controls access to protected routes\n * Redirects unauthenticated users to error page 401\n * Stores the original location in the state for redirect after login\n * \n * üá´üá∑ PrivateRoute - Contr√¥le l'acc√®s aux routes prot√©g√©es\n * Redirige les utilisateurs non authentifi√©s vers la page d'erreur 401\n * Stocke l'emplacement d'origine dans l'√©tat pour la redirection apr√®s connexion\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const location = useLocation();\n\n  // Si l'utilisateur n'est pas authentifi√©, rediriger vers la page d'erreur 401\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/401\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si l'utilisateur est authentifi√©, afficher le contenu prot√©g√©\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n_s(PrivateRoute, \"WzpKwDUKiPoOUCemvrTonKOMw58=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Outlet","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","PrivateRoute","_s","token","location","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/routes/PrivateRoute.jsx"],"sourcesContent":["/**\n * üá¨üáß Private route component that redirects unauthenticated users to error page 401\n * üá´üá∑ Composant de route priv√©e qui redirige les utilisateurs non authentifi√©s vers la page d'erreur 401\n */\nimport { Outlet, Navigate, useLocation } from \"react-router-dom\";\nimport useAuth from \"../hooks/useAuth\";\n\n/**\n * üá¨üáß PrivateRoute - Controls access to protected routes\n * Redirects unauthenticated users to error page 401\n * Stores the original location in the state for redirect after login\n * \n * üá´üá∑ PrivateRoute - Contr√¥le l'acc√®s aux routes prot√©g√©es\n * Redirige les utilisateurs non authentifi√©s vers la page d'erreur 401\n * Stocke l'emplacement d'origine dans l'√©tat pour la redirection apr√®s connexion\n */\nconst PrivateRoute = () => {\n  const { token } = useAuth();\n  const location = useLocation();\n\n  // Si l'utilisateur n'est pas authentifi√©, rediriger vers la page d'erreur 401\n  if (!token) {\n    return <Navigate to=\"/401\" state={{ from: location }} replace />;\n  }\n\n  // Si l'utilisateur est authentifi√©, afficher le contenu prot√©g√©\n  return <Outlet />;\n};\n\nexport default PrivateRoute;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,OAAO,MAAM,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAM,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC3B,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAI,CAACM,KAAK,EAAE;IACV,oBAAOH,OAAA,CAACJ,QAAQ;MAACS,EAAE,EAAC,MAAM;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEH;MAAS,CAAE;MAACI,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClE;;EAEA;EACA,oBAAOZ,OAAA,CAACL,MAAM;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAACV,EAAA,CAXID,YAAY;EAAA,QACEH,OAAO,EACRD,WAAW;AAAA;AAAAgB,EAAA,GAFxBZ,YAAY;AAalB,eAAeA,YAAY;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}