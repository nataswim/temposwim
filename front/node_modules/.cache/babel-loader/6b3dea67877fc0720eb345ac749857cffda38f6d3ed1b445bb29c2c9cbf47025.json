{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/context/UIContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/UIContext.jsx\n// Gestion de l'interface utilisateur\n// Contexte React pour gérer l'état global et les notifications d'erreur\n\nimport React, { createContext, useState, useContext, useMemo, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Création du contexte UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UIContext = /*#__PURE__*/createContext();\n\n/**\n * Types de notifications supportés\n */\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Fournisseur de contexte UI\nexport const UIProvider = ({\n  children\n}) => {\n  _s();\n  // États de l'interface utilisateur\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [language, setLanguage] = useState('fr');\n  const [isLoading, setIsLoading] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  // Notification globale unique (pour les messages système importants)\n  const [globalNotification, setGlobalNotification] = useState(null);\n\n  // Fonctions de gestion de l'interface\n  const toggleMenu = () => {\n    setIsMenuOpen(prev => !prev);\n  };\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n  const changeLanguage = newLanguage => {\n    setLanguage(newLanguage);\n  };\n\n  /**\n   * Ajoute une notification avec auto-suppression après un délai\n   * @param {Object} notification - Objet de notification\n   * @param {string} notification.type - Type de notification (success, error, warning, info)\n   * @param {string} notification.message - Message à afficher\n   * @param {number} notification.duration - Durée d'affichage en ms (0 pour permanent)\n   */\n  const addNotification = useCallback(notification => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      ...notification,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-suppression après la durée spécifiée (par défaut 5000ms)\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, notification.duration || 5000);\n    }\n  }, []);\n  const removeNotification = useCallback(notificationId => {\n    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));\n  }, []);\n\n  /**\n   * Affiche une notification globale\n   * @param {string} message - Message à afficher\n   * @param {string} type - Type de notification (success, error, warning, info)\n   * @param {number} duration - Durée d'affichage en ms (0 pour permanent)\n   */\n  const showGlobalNotification = useCallback((message, type = NOTIFICATION_TYPES.INFO, duration = 5000) => {\n    setGlobalNotification({\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    });\n\n    // Effacer la notification après la durée spécifiée\n    if (duration > 0) {\n      setTimeout(() => {\n        setGlobalNotification(null);\n      }, duration);\n    }\n  }, []);\n\n  /**\n   * Efface la notification globale\n   */\n  const clearGlobalNotification = useCallback(() => {\n    setGlobalNotification(null);\n  }, []);\n\n  /**\n   * Affiche une notification d'erreur globale\n   * @param {string} message - Message d'erreur\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showError = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.ERROR, duration);\n  }, [showGlobalNotification]);\n\n  /**\n   * Affiche une notification de succès globale\n   * @param {string} message - Message de succès\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showSuccess = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.SUCCESS, duration);\n  }, [showGlobalNotification]);\n\n  /**\n   * Affiche une notification d'avertissement globale\n   * @param {string} message - Message d'avertissement\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showWarning = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.WARNING, duration);\n  }, [showGlobalNotification]);\n\n  /**\n   * Affiche une notification d'information globale\n   * @param {string} message - Message d'information\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showInfo = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.INFO, duration);\n  }, [showGlobalNotification]);\n\n  /**\n   * Gestionnaire pour les événements de connexion/déconnexion réseau\n   */\n  const handleNetworkChange = useCallback(() => {\n    const online = navigator.onLine;\n    setIsOffline(!online);\n    if (!online) {\n      showGlobalNotification(\"Vous êtes hors ligne. Certaines fonctionnalités peuvent ne pas être disponibles.\", NOTIFICATION_TYPES.WARNING, 0 // Notification permanente\n      );\n    } else {\n      showGlobalNotification(\"Connexion internet rétablie.\", NOTIFICATION_TYPES.SUCCESS, 3000);\n    }\n  }, [showGlobalNotification]);\n\n  // Abonnement aux événements de réseau\n  useEffect(() => {\n    window.addEventListener('online', handleNetworkChange);\n    window.addEventListener('offline', handleNetworkChange);\n    return () => {\n      window.removeEventListener('online', handleNetworkChange);\n      window.removeEventListener('offline', handleNetworkChange);\n    };\n  }, [handleNetworkChange]);\n\n  // Mémorisation des valeurs du contexte pour optimiser les performances\n  const contextValue = useMemo(() => ({\n    // États originaux\n    isMenuOpen,\n    theme,\n    language,\n    isLoading,\n    notifications,\n    // Nouveaux états\n    isOffline,\n    globalNotification,\n    // Méthodes originales\n    toggleMenu,\n    closeMenu,\n    toggleTheme,\n    changeLanguage,\n    setIsLoading,\n    addNotification,\n    removeNotification,\n    // Nouvelles méthodes\n    showGlobalNotification,\n    clearGlobalNotification,\n    showError,\n    showSuccess,\n    showWarning,\n    showInfo,\n    NOTIFICATION_TYPES\n  }), [isMenuOpen, theme, language, isLoading, notifications, isOffline, globalNotification, toggleMenu, closeMenu, toggleTheme, changeLanguage, setIsLoading, addNotification, removeNotification, showGlobalNotification, clearGlobalNotification, showError, showSuccess, showWarning, showInfo]);\n  return /*#__PURE__*/_jsxDEV(UIContext.Provider, {\n    value: contextValue,\n    children: [children, isOffline && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"offline-banner position-fixed bottom-0 start-0 end-0 bg-warning text-dark p-2 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Vous \\xEAtes hors ligne.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), \" V\\xE9rifiez votre connexion internet.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n\n// Validation des props\n_s(UIProvider, \"MxkLQkA+xfpaEtOg8oJvt3+WZs0=\");\n_c = UIProvider;\nUIProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n// Hook personnalisé pour utiliser le contexte UI\nexport const useUI = () => {\n  _s2();\n  const context = useContext(UIContext);\n  if (!context) {\n    throw new Error('useUI must be used within a UIProvider');\n  }\n  return context;\n};\n_s2(useUI, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default UIContext;\nvar _c;\n$RefreshReg$(_c, \"UIProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useMemo","useCallback","useEffect","PropTypes","jsxDEV","_jsxDEV","UIContext","NOTIFICATION_TYPES","SUCCESS","ERROR","WARNING","INFO","UIProvider","children","_s","isMenuOpen","setIsMenuOpen","theme","setTheme","language","setLanguage","isLoading","setIsLoading","notifications","setNotifications","isOffline","setIsOffline","navigator","onLine","globalNotification","setGlobalNotification","toggleMenu","prev","closeMenu","toggleTheme","changeLanguage","newLanguage","addNotification","notification","id","Date","now","newNotification","timestamp","duration","setTimeout","removeNotification","notificationId","filter","notif","showGlobalNotification","message","type","clearGlobalNotification","showError","showSuccess","showWarning","showInfo","handleNetworkChange","online","window","addEventListener","removeEventListener","contextValue","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useUI","_s2","context","Error","$RefreshReg$"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/context/UIContext.jsx"],"sourcesContent":["// src/context/UIContext.jsx\n// Gestion de l'interface utilisateur\n// Contexte React pour gérer l'état global et les notifications d'erreur\n\nimport React, { createContext, useState, useContext, useMemo, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Création du contexte UI\nconst UIContext = createContext();\n\n/**\n * Types de notifications supportés\n */\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Fournisseur de contexte UI\nexport const UIProvider = ({ children }) => {\n  // États de l'interface utilisateur\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [language, setLanguage] = useState('fr');\n  const [isLoading, setIsLoading] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  \n  // Notification globale unique (pour les messages système importants)\n  const [globalNotification, setGlobalNotification] = useState(null);\n\n  // Fonctions de gestion de l'interface\n  const toggleMenu = () => {\n    setIsMenuOpen(prev => !prev);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  const toggleTheme = () => {\n    setTheme(prev => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  const changeLanguage = (newLanguage) => {\n    setLanguage(newLanguage);\n  };\n\n  /**\n   * Ajoute une notification avec auto-suppression après un délai\n   * @param {Object} notification - Objet de notification\n   * @param {string} notification.type - Type de notification (success, error, warning, info)\n   * @param {string} notification.message - Message à afficher\n   * @param {number} notification.duration - Durée d'affichage en ms (0 pour permanent)\n   */\n  const addNotification = useCallback((notification) => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      ...notification,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto-suppression après la durée spécifiée (par défaut 5000ms)\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, notification.duration || 5000);\n    }\n  }, []);\n\n  const removeNotification = useCallback((notificationId) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));\n  }, []);\n  \n  /**\n   * Affiche une notification globale\n   * @param {string} message - Message à afficher\n   * @param {string} type - Type de notification (success, error, warning, info)\n   * @param {number} duration - Durée d'affichage en ms (0 pour permanent)\n   */\n  const showGlobalNotification = useCallback((message, type = NOTIFICATION_TYPES.INFO, duration = 5000) => {\n    setGlobalNotification({\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    });\n    \n    // Effacer la notification après la durée spécifiée\n    if (duration > 0) {\n      setTimeout(() => {\n        setGlobalNotification(null);\n      }, duration);\n    }\n  }, []);\n  \n  /**\n   * Efface la notification globale\n   */\n  const clearGlobalNotification = useCallback(() => {\n    setGlobalNotification(null);\n  }, []);\n  \n  /**\n   * Affiche une notification d'erreur globale\n   * @param {string} message - Message d'erreur\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showError = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.ERROR, duration);\n  }, [showGlobalNotification]);\n  \n  /**\n   * Affiche une notification de succès globale\n   * @param {string} message - Message de succès\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showSuccess = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.SUCCESS, duration);\n  }, [showGlobalNotification]);\n  \n  /**\n   * Affiche une notification d'avertissement globale\n   * @param {string} message - Message d'avertissement\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showWarning = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.WARNING, duration);\n  }, [showGlobalNotification]);\n  \n  /**\n   * Affiche une notification d'information globale\n   * @param {string} message - Message d'information\n   * @param {number} duration - Durée d'affichage en ms\n   */\n  const showInfo = useCallback((message, duration = 5000) => {\n    showGlobalNotification(message, NOTIFICATION_TYPES.INFO, duration);\n  }, [showGlobalNotification]);\n  \n  /**\n   * Gestionnaire pour les événements de connexion/déconnexion réseau\n   */\n  const handleNetworkChange = useCallback(() => {\n    const online = navigator.onLine;\n    setIsOffline(!online);\n    \n    if (!online) {\n      showGlobalNotification(\n        \"Vous êtes hors ligne. Certaines fonctionnalités peuvent ne pas être disponibles.\",\n        NOTIFICATION_TYPES.WARNING,\n        0 // Notification permanente\n      );\n    } else {\n      showGlobalNotification(\n        \"Connexion internet rétablie.\",\n        NOTIFICATION_TYPES.SUCCESS,\n        3000\n      );\n    }\n  }, [showGlobalNotification]);\n  \n  // Abonnement aux événements de réseau\n  useEffect(() => {\n    window.addEventListener('online', handleNetworkChange);\n    window.addEventListener('offline', handleNetworkChange);\n    \n    return () => {\n      window.removeEventListener('online', handleNetworkChange);\n      window.removeEventListener('offline', handleNetworkChange);\n    };\n  }, [handleNetworkChange]);\n\n  // Mémorisation des valeurs du contexte pour optimiser les performances\n  const contextValue = useMemo(() => ({\n    // États originaux\n    isMenuOpen,\n    theme,\n    language,\n    isLoading,\n    notifications,\n    \n    // Nouveaux états\n    isOffline,\n    globalNotification,\n    \n    // Méthodes originales\n    toggleMenu,\n    closeMenu,\n    toggleTheme,\n    changeLanguage,\n    setIsLoading,\n    addNotification,\n    removeNotification,\n    \n    // Nouvelles méthodes\n    showGlobalNotification,\n    clearGlobalNotification,\n    showError,\n    showSuccess,\n    showWarning,\n    showInfo,\n    NOTIFICATION_TYPES\n  }), [\n    isMenuOpen, \n    theme, \n    language, \n    isLoading, \n    notifications,\n    isOffline,\n    globalNotification,\n    toggleMenu,\n    closeMenu,\n    toggleTheme,\n    changeLanguage,\n    setIsLoading,\n    addNotification,\n    removeNotification,\n    showGlobalNotification,\n    clearGlobalNotification,\n    showError,\n    showSuccess,\n    showWarning,\n    showInfo\n  ]);\n\n  return (\n    <UIContext.Provider value={contextValue}>\n      {children}\n      \n      {/* Bannière hors ligne */}\n      {isOffline && (\n        <div className=\"offline-banner position-fixed bottom-0 start-0 end-0 bg-warning text-dark p-2 text-center\">\n          <strong>Vous êtes hors ligne.</strong> Vérifiez votre connexion internet.\n        </div>\n      )}\n    </UIContext.Provider>\n  );\n};\n\n// Validation des props\nUIProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n// Hook personnalisé pour utiliser le contexte UI\nexport const useUI = () => {\n  const context = useContext(UIContext);\n  \n  if (!context) {\n    throw new Error('useUI must be used within a UIProvider');\n  }\n  \n  return context;\n};\n\nexport default UIContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}