{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nconst API_URL = 'http://127.0.0.1:8000/api'; // API\n\nconst AuthService = {\n  setAuthToken: token => {\n    if (token) {\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  },\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/login`, {\n        email,\n        password\n      });\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    }\n  },\n  register: async (username, email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/register`, {\n        username,\n        email,\n        password\n      });\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      await axios.post(`${API_URL}/logout`);\n      AuthService.setAuthToken(null);\n    } catch (error) {\n      console.error('Erreur de déconnexion:', error);\n      AuthService.setAuthToken(null);\n    }\n  },\n  refreshToken: async () => {\n    try {\n      const response = await axios.post(`${API_URL}/refresh`);\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur de rafraîchissement du token:', error);\n      throw error;\n    }\n  },\n  getCurrentUser: async () => {\n    const token = AuthService.getToken();\n    if (!token) {\n      throw new Error('Pas de token disponible');\n    }\n    try {\n      // Ajouter explicitement le token aux headers pour cette requête\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      const response = await axios.get(`${API_URL}/me`, config);\n      console.log('Utilisateur récupéré:', response.data);\n      return response.data.user || response.data;\n    } catch (error) {\n      console.error('Erreur de récupération de l\\'utilisateur:', error);\n      throw error;\n    }\n  },\n  isAuthenticated: () => {\n    const token = AuthService.getToken();\n    if (!token) return false;\n    try {\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","jwtDecode","API_URL","AuthService","setAuthToken","token","localStorage","setItem","defaults","headers","common","removeItem","getToken","getItem","login","email","password","response","post","data","authorisation","error","console","register","username","logout","refreshToken","getCurrentUser","Error","config","get","log","user","isAuthenticated","decoded","currentTime","Date","now","exp"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n\nconst API_URL = 'http://127.0.0.1:8000/api'; // API\n\nconst AuthService = {\n  setAuthToken: (token) => {\n    if (token) {\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  },\n\n\n\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n\n\n   login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/login`, { email, password });\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    }\n  },\n\n\n\n  register: async (username, email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/register`, {\n        username,\n        email,\n        password\n      });\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    }\n  },\n\n\n\n  logout: async () => {\n    try {\n      await axios.post(`${API_URL}/logout`);\n      AuthService.setAuthToken(null);\n    } catch (error) {\n      console.error('Erreur de déconnexion:', error);\n      AuthService.setAuthToken(null);\n    }\n  },\n\n\n\n  refreshToken: async () => {\n    try {\n      const response = await axios.post(`${API_URL}/refresh`);\n      if (response.data.authorisation.token) {\n        AuthService.setAuthToken(response.data.authorisation.token);\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erreur de rafraîchissement du token:', error);\n      throw error;\n    }\n  },\n\n\n\n  getCurrentUser: async () => {\n    const token = AuthService.getToken();\n    if (!token) {\n      throw new Error('Pas de token disponible');\n    }\n    \n    try {\n      // Ajouter explicitement le token aux headers pour cette requête\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      \n      const response = await axios.get(`${API_URL}/me`, config);\n      console.log('Utilisateur récupéré:', response.data);\n      return response.data.user || response.data;\n    } catch (error) {\n      console.error('Erreur de récupération de l\\'utilisateur:', error);\n      throw error;\n    }\n  },\n\n\n\n  isAuthenticated: () => {\n    const token = AuthService.getToken();\n    if (!token) return false;\n    \n    try {\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}