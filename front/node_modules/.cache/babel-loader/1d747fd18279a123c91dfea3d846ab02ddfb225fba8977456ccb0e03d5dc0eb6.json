{"ast":null,"code":"import api from './api';\n\n// Base URL for uploads - utilise la configuration de l'environnement ou valeur par défaut\nconst API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\nconst STORAGE_URL = `${API_URL}/storage/`;\n\n// Get public URL for an upload\nexport const getUploadUrl = path => {\n  if (!path) return null;\n\n  // Si l'URL est déjà complète, la retourner telle quelle\n  if (path.startsWith('http')) {\n    return path;\n  }\n\n  // Ne pas supprimer le préfixe 'uploads/' car il est nécessaire\n  // Le stockage est configuré pour utiliser 'public' dans filesystems.php\n  return `${API_URL}/storage/${path}`;\n};\n\n// Get all uploads\nexport const getUploads = async () => {\n  const response = await api.get('/uploads');\n  // Add public URL to each upload\n  response.data = response.data.map(upload => ({\n    ...upload,\n    url: getUploadUrl(upload.path)\n  }));\n  return response;\n};\n\n// Get a single upload\nexport const getUpload = async id => {\n  const response = await api.get(`/uploads/${id}`);\n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Create a new upload\nexport const createUpload = async formData => {\n  // Keep original filename\n  const file = formData.get('file');\n  if (file) {\n    // Add original filename to form data\n    formData.append('original_name', file.name);\n  }\n  const response = await api.post('/uploads', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Update an upload\nexport const updateUpload = async (id, formData) => {\n  // Keep original filename if new file provided\n  const file = formData.get('file');\n  if (file) {\n    // Add original filename to form data\n    formData.append('original_name', file.name);\n  }\n\n  // Add _method field for Laravel to handle PUT request\n  formData.append('_method', 'PUT');\n  const response = await api.post(`/uploads/${id}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Delete an upload\nexport const deleteUpload = id => {\n  return api.delete(`/uploads/${id}`);\n};\n\n// Get uploads for a user\nexport const getUserUploads = async userId => {\n  const response = await api.get(`/users/${userId}/uploads`);\n  response.data = response.data.map(upload => ({\n    ...upload,\n    url: getUploadUrl(upload.path)\n  }));\n  return response;\n};","map":{"version":3,"names":["api","API_URL","process","env","REACT_APP_API_URL","STORAGE_URL","getUploadUrl","path","startsWith","getUploads","response","get","data","map","upload","url","getUpload","id","createUpload","formData","file","append","name","post","headers","updateUpload","deleteUpload","delete","getUserUploads","userId"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/services/uploads.js"],"sourcesContent":["import api from './api';\n\n// Base URL for uploads - utilise la configuration de l'environnement ou valeur par défaut\nconst API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\nconst STORAGE_URL = `${API_URL}/storage/`;\n\n// Get public URL for an upload\nexport const getUploadUrl = (path) => {\n  if (!path) return null;\n  \n  // Si l'URL est déjà complète, la retourner telle quelle\n  if (path.startsWith('http')) {\n    return path;\n  }\n  \n  // Ne pas supprimer le préfixe 'uploads/' car il est nécessaire\n  // Le stockage est configuré pour utiliser 'public' dans filesystems.php\n  return `${API_URL}/storage/${path}`;\n};\n\n// Get all uploads\nexport const getUploads = async () => {\n  const response = await api.get('/uploads');\n  // Add public URL to each upload\n  response.data = response.data.map(upload => ({\n    ...upload,\n    url: getUploadUrl(upload.path)\n  }));\n  return response;\n};\n\n// Get a single upload\nexport const getUpload = async (id) => {\n  const response = await api.get(`/uploads/${id}`);\n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Create a new upload\nexport const createUpload = async (formData) => {\n  // Keep original filename\n  const file = formData.get('file');\n  if (file) {\n    // Add original filename to form data\n    formData.append('original_name', file.name);\n  }\n\n  const response = await api.post('/uploads', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  \n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Update an upload\nexport const updateUpload = async (id, formData) => {\n  // Keep original filename if new file provided\n  const file = formData.get('file');\n  if (file) {\n    // Add original filename to form data\n    formData.append('original_name', file.name);\n  }\n  \n  // Add _method field for Laravel to handle PUT request\n  formData.append('_method', 'PUT');\n  \n  const response = await api.post(`/uploads/${id}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  \n  response.data = {\n    ...response.data,\n    url: getUploadUrl(response.data.path)\n  };\n  return response;\n};\n\n// Delete an upload\nexport const deleteUpload = (id) => {\n  return api.delete(`/uploads/${id}`);\n};\n\n// Get uploads for a user\nexport const getUserUploads = async (userId) => {\n  const response = await api.get(`/users/${userId}/uploads`);\n  response.data = response.data.map(upload => ({\n    ...upload,\n    url: getUploadUrl(upload.path)\n  }));\n  return response;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}