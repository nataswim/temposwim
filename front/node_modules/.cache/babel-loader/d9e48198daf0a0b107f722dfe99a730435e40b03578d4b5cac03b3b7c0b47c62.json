{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx\",\n  _s = $RefreshSig$();\n/**\n * 🇬🇧 Swimming Performance Predictor Component - allows swimmers to predict intermediate and final race times based on 50m personal bests and medley splits.\n * 🇫🇷 Composant de prédiction de performance en natation - permet aux nageurs de prédire les temps intermédiaires et finaux à partir du meilleur temps au 50m et des temps par nage pour les quatre nages.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../../components/template/Header';\nimport Footer from '../../components/template/Footer';\nimport { FaStopwatch, FaInfoCircle } from 'react-icons/fa';\nimport { Timer, Info } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// 🏊‍♂️ Définition des styles de nage et distances disponibles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst swimmingStyles = [{\n  name: 'Crawl',\n  distances: [100, 200, 400, 800, 1500]\n}, {\n  name: 'Papillon',\n  distances: [100, 200]\n}, {\n  name: 'Brasse',\n  distances: [100, 200]\n}, {\n  name: 'Dos',\n  distances: [100, 200]\n}, {\n  name: 'Quatre Nages',\n  distances: [200, 400]\n}];\n\n// 🧮 Formatage du temps brut en mm:ss:cs\nconst formatTime = timeInSeconds => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round(timeInSeconds % 1 * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\n\n// 🔁 Ajoute un pourcentage de marge pour simuler la fatigue/erreur\nconst addFinalPercentage = time => {\n  return time * 1.049;\n};\n\n// 📈 Calcule les temps prévisionnels en fonction du style, distance et temps de base\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n  const time100m = addFinalPercentage(time50m + 1.5 + (time50m + 2.49));\n  switch (style) {\n    case 'Quatre Nages':\n      if (distance === 200 && medleyTimes) {\n        const {\n          butterfly50m,\n          backstroke50m,\n          breaststroke50m,\n          freestyle50m\n        } = medleyTimes;\n        const laps = [{\n          style: 'Papillon',\n          time: parseFloat(butterfly50m) + 2.2\n        }, {\n          style: 'Dos',\n          time: parseFloat(backstroke50m) + 3.09\n        }, {\n          style: 'Brasse',\n          time: parseFloat(breaststroke50m) + 5.59\n        }, {\n          style: 'Crawl',\n          time: parseFloat(freestyle50m) + 5.09\n        }];\n        laps.forEach((lap, i) => {\n          predictions.push({\n            distance: (i + 1) * 50,\n            time: i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time,\n            timeFormatted: formatTime(i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time),\n            label: `${lap.style} ${i + 1}${i === 0 ? 'er' : 'ème'} 50m`\n          });\n        });\n      } else if (distance === 400 && medleyTimes) {\n        const {\n          butterfly100m,\n          backstroke100m,\n          breaststroke100m,\n          freestyle100m\n        } = medleyTimes;\n        const laps = [{\n          style: 'Papillon',\n          time: parseFloat(butterfly100m) + 3.2\n        }, {\n          style: 'Dos',\n          time: parseFloat(backstroke100m) + 6.19\n        }, {\n          style: 'Brasse',\n          time: parseFloat(breaststroke100m) + 6\n        }, {\n          style: 'Crawl',\n          time: parseFloat(freestyle100m) + 8.97\n        }];\n        laps.forEach((lap, i) => {\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time,\n            timeFormatted: formatTime(i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time),\n            label: `${lap.style} ${i + 1}${i === 0 ? 'er' : 'ème'} 100m`\n          });\n        });\n      }\n      break;\n    default:\n      if (distance === 100) {\n        predictions.push({\n          distance: 50,\n          time: time50m + 1.5,\n          timeFormatted: formatTime(time50m + 1.5),\n          label: '1er 50m'\n        }, {\n          distance: 100,\n          time: addFinalPercentage(time50m + 2.49),\n          timeFormatted: formatTime(addFinalPercentage(time50m + 2.49)),\n          label: '2ème 50m'\n        });\n      } else if (distance === 200) {\n        const laps = [2.5, 4.13, 4.53, 2.57];\n        laps.forEach((t, i) => {\n          const time = time50m + t;\n          predictions.push({\n            distance: (i + 1) * 50,\n            time: i === 3 ? addFinalPercentage(time) : time,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(time) : time),\n            label: `${i + 1}${i === 0 ? 'er' : 'ème'} 50m`\n          });\n        });\n      } else if (distance === 400) {\n        const adds = [4.5, 6.13, 6, 2.59];\n        adds.forEach((add, i) => {\n          const time = time100m + add;\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === 3 ? addFinalPercentage(time) : time,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(time) : time),\n            label: `${i + 1}${i === 0 ? 'er' : 'ème'} 100m`\n          });\n        });\n      }\n      break;\n  }\n  return predictions;\n};\n\n// ➕ Somme tous les temps calculés pour obtenir le total\nconst calculateTotalTime = predictions => {\n  return predictions.reduce((total, pred) => total + pred.time, 0);\n};\n\n// 🧠 Composant principal\nconst SwimmingPerformancePredictor = () => {\n  _s();\n  var _swimmingStyles$find;\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [distance, setDistance] = useState(100);\n  const [predictions, setPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [totalTime, setTotalTime] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: ''\n  });\n\n  // 🧮 Gère le calcul lorsqu'on clique sur \"Calculer\"\n  const handleCalculate = () => {\n    const parsedTime = parseFloat(bestTime50m);\n    if (selectedStyle === 'Quatre Nages') {\n      const is400 = selectedDistance === 400;\n      const requiredFields = is400 ? ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m'] : ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m'];\n      const missing = requiredFields.some(field => !medleyTimes[field] || isNaN(parseFloat(medleyTimes[field])));\n      if (missing) {\n        setError(`Veuillez entrer tous les temps pour le ${selectedDistance}m Quatre Nages`);\n        return;\n      }\n      const preds = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n      setPredictions(preds);\n      setTotalTime(formatTime(calculateTotalTime(preds)));\n      setError('');\n      return;\n    }\n    if (isNaN(parsedTime) || parsedTime <= 0) {\n      setError('Veuillez entrer un temps valide pour le 50m.');\n      return;\n    }\n    const preds = calculatePredictedTimes(selectedStyle, distance, parsedTime);\n    setPredictions(preds);\n    setTotalTime(formatTime(calculateTotalTime(preds)));\n    setError('');\n  };\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n      setDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // 🖥️ UI simplifiée (peut être enrichie selon ta maquette existante)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Pr\\xE9dicteur de Performance Natation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Style de nage :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedStyle,\n          onChange: e => setSelectedStyle(e.target.value),\n          children: swimmingStyles.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: s.name,\n            children: s.name\n          }, s.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Distance :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: distance,\n          onChange: e => setDistance(parseInt(e.target.value)),\n          children: (_swimmingStyles$find = swimmingStyles.find(s => s.name === selectedStyle)) === null || _swimmingStyles$find === void 0 ? void 0 : _swimmingStyles$find.distances.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: d,\n            children: [d, \"m\"]\n          }, d, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), selectedStyle === 'Quatre Nages' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: (distance === 200 || distance === 400) && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Temps pour chaque nage :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), Object.entries(medleyTimes).filter(([key]) => key.includes(distance === 200 ? '50m' : '100m')).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [key, \" :\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: value,\n              onChange: e => handleMedleyTimeChange(key, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Temps 50m :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          value: bestTime50m,\n          onChange: e => setBestTime50m(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCalculate,\n        children: \"Calculer mes temps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }, this), totalTime && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4\",\n        children: [\"Temps total estim\\xE9 : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: totalTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 23\n      }, this), predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Temps interm\\xE9diaires :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: predictions.map((p, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [p.label, \": \", p.timeFormatted, \" (\", p.time.toFixed(2), \"s)\"]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SwimmingPerformancePredictor, \"iop0zChqXPkQZe62+NGn4ZESG0o=\");\n_c = SwimmingPerformancePredictor;\nexport default SwimmingPerformancePredictor;\nvar _c;\n$RefreshReg$(_c, \"SwimmingPerformancePredictor\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","FaStopwatch","FaInfoCircle","Timer","Info","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","swimmingStyles","name","distances","formatTime","timeInSeconds","minutes","Math","floor","seconds","centiseconds","round","toString","padStart","addFinalPercentage","time","calculatePredictedTimes","style","distance","bestTime50m","medleyTimes","predictions","time50m","time100m","butterfly50m","backstroke50m","breaststroke50m","freestyle50m","laps","parseFloat","forEach","lap","i","push","length","timeFormatted","label","butterfly100m","backstroke100m","breaststroke100m","freestyle100m","t","adds","add","calculateTotalTime","reduce","total","pred","SwimmingPerformancePredictor","_s","_swimmingStyles$find","selectedStyle","setSelectedStyle","selectedDistance","setSelectedDistance","setBestTime50m","setDistance","setPredictions","error","setError","totalTime","setTotalTime","setMedleyTimes","handleCalculate","parsedTime","is400","requiredFields","missing","some","field","isNaN","preds","find","s","handleMedleyTimeChange","value","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","e","target","map","parseInt","d","Object","entries","filter","key","includes","type","step","onClick","p","idx","toFixed","_c","$RefreshReg$"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx"],"sourcesContent":["/**\n * 🇬🇧 Swimming Performance Predictor Component - allows swimmers to predict intermediate and final race times based on 50m personal bests and medley splits.\n * 🇫🇷 Composant de prédiction de performance en natation - permet aux nageurs de prédire les temps intermédiaires et finaux à partir du meilleur temps au 50m et des temps par nage pour les quatre nages.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../../components/template/Header';\nimport Footer from '../../components/template/Footer';\nimport { FaStopwatch, FaInfoCircle } from 'react-icons/fa';\nimport { Timer, Info } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// 🏊‍♂️ Définition des styles de nage et distances disponibles\nconst swimmingStyles = [\n  { name: 'Crawl', distances: [100, 200, 400, 800, 1500] },\n  { name: 'Papillon', distances: [100, 200] },\n  { name: 'Brasse', distances: [100, 200] },\n  { name: 'Dos', distances: [100, 200] },\n  { name: 'Quatre Nages', distances: [200, 400] },\n];\n\n// 🧮 Formatage du temps brut en mm:ss:cs\nconst formatTime = (timeInSeconds) => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round((timeInSeconds % 1) * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\n\n// 🔁 Ajoute un pourcentage de marge pour simuler la fatigue/erreur\nconst addFinalPercentage = (time) => {\n  return time * 1.049;\n};\n\n// 📈 Calcule les temps prévisionnels en fonction du style, distance et temps de base\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n  const time100m = addFinalPercentage((time50m + 1.5) + (time50m + 2.49));\n\n  switch (style) {\n    case 'Quatre Nages':\n      if (distance === 200 && medleyTimes) {\n        const { butterfly50m, backstroke50m, breaststroke50m, freestyle50m } = medleyTimes;\n        const laps = [\n          { style: 'Papillon', time: parseFloat(butterfly50m) + 2.2 },\n          { style: 'Dos', time: parseFloat(backstroke50m) + 3.09 },\n          { style: 'Brasse', time: parseFloat(breaststroke50m) + 5.59 },\n          { style: 'Crawl', time: parseFloat(freestyle50m) + 5.09 }\n        ];\n        laps.forEach((lap, i) => {\n          predictions.push({\n            distance: (i + 1) * 50,\n            time: i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time,\n            timeFormatted: formatTime(i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time),\n            label: `${lap.style} ${i + 1}${i === 0 ? 'er' : 'ème'} 50m`\n          });\n        });\n      } else if (distance === 400 && medleyTimes) {\n        const { butterfly100m, backstroke100m, breaststroke100m, freestyle100m } = medleyTimes;\n        const laps = [\n          { style: 'Papillon', time: parseFloat(butterfly100m) + 3.2 },\n          { style: 'Dos', time: parseFloat(backstroke100m) + 6.19 },\n          { style: 'Brasse', time: parseFloat(breaststroke100m) + 6 },\n          { style: 'Crawl', time: parseFloat(freestyle100m) + 8.97 }\n        ];\n        laps.forEach((lap, i) => {\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time,\n            timeFormatted: formatTime(i === laps.length - 1 ? addFinalPercentage(lap.time) : lap.time),\n            label: `${lap.style} ${i + 1}${i === 0 ? 'er' : 'ème'} 100m`\n          });\n        });\n      }\n      break;\n\n    default:\n      if (distance === 100) {\n        predictions.push(\n          { distance: 50, time: time50m + 1.5, timeFormatted: formatTime(time50m + 1.5), label: '1er 50m' },\n          { distance: 100, time: addFinalPercentage(time50m + 2.49), timeFormatted: formatTime(addFinalPercentage(time50m + 2.49)), label: '2ème 50m' }\n        );\n      } else if (distance === 200) {\n        const laps = [2.5, 4.13, 4.53, 2.57];\n        laps.forEach((t, i) => {\n          const time = time50m + t;\n          predictions.push({\n            distance: (i + 1) * 50,\n            time: i === 3 ? addFinalPercentage(time) : time,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(time) : time),\n            label: `${i + 1}${i === 0 ? 'er' : 'ème'} 50m`\n          });\n        });\n      } else if (distance === 400) {\n        const adds = [4.5, 6.13, 6, 2.59];\n        adds.forEach((add, i) => {\n          const time = time100m + add;\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === 3 ? addFinalPercentage(time) : time,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(time) : time),\n            label: `${i + 1}${i === 0 ? 'er' : 'ème'} 100m`\n          });\n        });\n      }\n      break;\n  }\n\n  return predictions;\n};\n\n// ➕ Somme tous les temps calculés pour obtenir le total\nconst calculateTotalTime = (predictions) => {\n  return predictions.reduce((total, pred) => total + pred.time, 0);\n};\n\n// 🧠 Composant principal\nconst SwimmingPerformancePredictor = () => {\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [distance, setDistance] = useState(100);\n  const [predictions, setPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [totalTime, setTotalTime] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: '',\n  });\n\n  // 🧮 Gère le calcul lorsqu'on clique sur \"Calculer\"\n  const handleCalculate = () => {\n    const parsedTime = parseFloat(bestTime50m);\n    if (selectedStyle === 'Quatre Nages') {\n      const is400 = selectedDistance === 400;\n      const requiredFields = is400\n        ? ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m']\n        : ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m'];\n\n      const missing = requiredFields.some(field => !medleyTimes[field] || isNaN(parseFloat(medleyTimes[field])));\n      if (missing) {\n        setError(`Veuillez entrer tous les temps pour le ${selectedDistance}m Quatre Nages`);\n        return;\n      }\n\n      const preds = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n      setPredictions(preds);\n      setTotalTime(formatTime(calculateTotalTime(preds)));\n      setError('');\n      return;\n    }\n\n    if (isNaN(parsedTime) || parsedTime <= 0) {\n      setError('Veuillez entrer un temps valide pour le 50m.');\n      return;\n    }\n\n    const preds = calculatePredictedTimes(selectedStyle, distance, parsedTime);\n    setPredictions(preds);\n    setTotalTime(formatTime(calculateTotalTime(preds)));\n    setError('');\n  };\n\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n      setDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // 🖥️ UI simplifiée (peut être enrichie selon ta maquette existante)\n  return (\n    <>\n      <Header />\n      <main className=\"p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Prédicteur de Performance Natation</h1>\n\n        <div className=\"mb-4\">\n          <label>Style de nage :</label>\n          <select value={selectedStyle} onChange={(e) => setSelectedStyle(e.target.value)}>\n            {swimmingStyles.map((s) => (\n              <option key={s.name} value={s.name}>{s.name}</option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"mb-4\">\n          <label>Distance :</label>\n          <select value={distance} onChange={(e) => setDistance(parseInt(e.target.value))}>\n            {swimmingStyles.find(s => s.name === selectedStyle)?.distances.map(d => (\n              <option key={d} value={d}>{d}m</option>\n            ))}\n          </select>\n        </div>\n\n        {selectedStyle === 'Quatre Nages' ? (\n          <>\n            {(distance === 200 || distance === 400) && (\n              <>\n                <h3>Temps pour chaque nage :</h3>\n                {Object.entries(medleyTimes).filter(([key]) => key.includes(distance === 200 ? '50m' : '100m')).map(([key, value]) => (\n                  <div key={key} className=\"mb-2\">\n                    <label>{key} :</label>\n                    <input type=\"number\" step=\"0.01\" value={value} onChange={(e) => handleMedleyTimeChange(key, e.target.value)} />\n                  </div>\n                ))}\n              </>\n            )}\n          </>\n        ) : (\n          <div className=\"mb-4\">\n            <label>Temps 50m :</label>\n            <input type=\"number\" step=\"0.01\" value={bestTime50m} onChange={(e) => setBestTime50m(e.target.value)} />\n          </div>\n        )}\n\n        <button onClick={handleCalculate}>Calculer mes temps</button>\n\n        {error && <p className=\"text-red-600\">{error}</p>}\n\n        {totalTime && <p className=\"mt-4\">Temps total estimé : <strong>{totalTime}</strong></p>}\n\n        {predictions.length > 0 && (\n          <div className=\"mt-4\">\n            <h3>Temps intermédiaires :</h3>\n            <ul>\n              {predictions.map((p, idx) => (\n                <li key={idx}>{p.label}: {p.timeFormatted} ({p.time.toFixed(2)}s)</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default SwimmingPerformancePredictor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}