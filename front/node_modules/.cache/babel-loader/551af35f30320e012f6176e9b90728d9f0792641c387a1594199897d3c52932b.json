{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx\",\n  _s = $RefreshSig$();\n/**\n * üá¨üáß Swimming Performance Predictor for different strokes and distances\n * üá´üá∑ Pr√©dicteur de performance en natation selon la nage et la distance\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Timer, Info } from 'lucide-react';\n\n// üèä‚Äç‚ôÇÔ∏è Styles de nage et distances disponibles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst swimmingStyles = [{\n  name: 'Crawl',\n  distances: [100, 200, 400, 800, 1500]\n}, {\n  name: 'Papillon',\n  distances: [100, 200]\n}, {\n  name: 'Brasse',\n  distances: [100, 200]\n}, {\n  name: 'Dos',\n  distances: [100, 200]\n}, {\n  name: 'Quatre Nages',\n  distances: [200, 400]\n}];\n\n// ‚è±Ô∏è Formater un temps en secondes vers mm:ss.cc\nconst formatTime = timeInSeconds => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round(timeInSeconds % 1 * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\n\n// ‚ûï Appliquer le coefficient final √† la derni√®re longueur\nconst addFinalPercentage = time => time * 1.049;\n\n/**\n * üá¨üáß Calculates predicted lap times based on input data\n * üá´üá∑ Calcule les temps de passage pr√©visionnels selon la nage et la distance\n */\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n  const time100m = addFinalPercentage(time50m + 1.5 + (time50m + 2.49));\n  if (style === 'Quatre Nages' && medleyTimes) {\n    const getMedleyLaps = (distances, times) => {\n      return distances.map((dist, index) => {\n        const label = `${dist.style} ${index + 1}${index === 0 ? 'er' : '√®me'} ${distance === 200 ? '50m' : '100m'}`;\n        const lapTime = index === distances.length - 1 ? addFinalPercentage(dist.time) : dist.time;\n        return {\n          distance: (index + 1) * (distance === 200 ? 50 : 100),\n          time: lapTime,\n          timeFormatted: formatTime(lapTime),\n          label\n        };\n      });\n    };\n    if (distance === 200) {\n      const laps = [{\n        style: 'Papillon',\n        time: parseFloat(medleyTimes.butterfly50m) + 2.2\n      }, {\n        style: 'Dos',\n        time: parseFloat(medleyTimes.backstroke50m) + 3.09\n      }, {\n        style: 'Brasse',\n        time: parseFloat(medleyTimes.breaststroke50m) + 5.59\n      }, {\n        style: 'Crawl',\n        time: parseFloat(medleyTimes.freestyle50m) + 5.09\n      }];\n      return getMedleyLaps(laps);\n    }\n    if (distance === 400) {\n      const laps = [{\n        style: 'Papillon',\n        time: parseFloat(medleyTimes.butterfly100m) + 3.2\n      }, {\n        style: 'Dos',\n        time: parseFloat(medleyTimes.backstroke100m) + 6.19\n      }, {\n        style: 'Brasse',\n        time: parseFloat(medleyTimes.breaststroke100m) + 6\n      }, {\n        style: 'Crawl',\n        time: parseFloat(medleyTimes.freestyle100m) + 8.97\n      }];\n      return getMedleyLaps(laps);\n    }\n  }\n\n  // Autres styles de nage\n  if (style === 'Crawl' || style === 'Papillon' || style === 'Brasse' || style === 'Dos') {\n    const standardLaps = (dist, lapCount, additions) => {\n      return additions.map((add, i) => {\n        const lap = {\n          distance: dist === 50 ? (i + 1) * 50 : (i + 1) * 100,\n          time: i === additions.length - 1 ? addFinalPercentage(time50m + add) : time50m + add\n        };\n        return {\n          ...lap,\n          timeFormatted: formatTime(lap.time),\n          label: `${i + 1}${i === 0 ? 'er' : '√®me'} ${dist === 50 ? '50m' : '100m'}`\n        };\n      });\n    };\n    if (distance === 100) return standardLaps(50, 2, [1.5, 2.49]);\n    if (distance === 200) return standardLaps(50, 4, [2.5, 4.13, 4.53, 2.57]);\n    if (distance === 400) return standardLaps(100, 4, [4.5, 6.13, 6, 2.59]);\n    if (distance === 800) return standardLaps(100, 8, [4.5, ...Array(6).fill(6.13), 5]);\n    if (distance === 1500) return standardLaps(100, 15, [5, ...Array(13).fill(7), 6.5]);\n  }\n  return predictions;\n};\n\n// üßÆ Additionner les temps interm√©diaires\nconst calculateTotalTime = predictions => {\n  return predictions.reduce((acc, p) => acc + p.time, 0);\n};\n\n/**\n * üá¨üáß Main component for the swimming predictor interface\n * üá´üá∑ Composant principal de pr√©diction de performance natation\n */\nconst SwimmingPerformancePredictor = () => {\n  _s();\n  var _swimmingStyles$find;\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: ''\n  });\n  const [predictions, setPredictions] = useState([]);\n  const [totalTime, setTotalTime] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const calculatePredictions = () => {\n    setError('');\n    let newPredictions = [];\n    if (selectedStyle === 'Quatre Nages') {\n      const times = selectedDistance === 200 ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m'] : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m'];\n      if (times.some(field => !medleyTimes[field] || isNaN(parseFloat(medleyTimes[field])))) {\n        setError('Veuillez entrer tous les temps n√©cessaires pour le quatre nages.');\n        return;\n      }\n      newPredictions = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n    } else {\n      const time50 = parseFloat(bestTime50m);\n      if (isNaN(time50) || time50 <= 0) {\n        setError('Veuillez entrer un temps valide pour le 50m.');\n        return;\n      }\n      newPredictions = calculatePredictedTimes(selectedStyle, selectedDistance, time50);\n    }\n    setPredictions(newPredictions);\n    setTotalTime(formatTime(calculateTotalTime(newPredictions)));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center gap-2 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        className: \"w-6 h-6 text-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-gray-800\",\n        children: \"Pr\\xE9dicteur de Performance en Natation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block font-medium mb-1\",\n          children: \"Style de nage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedStyle,\n          onChange: e => setSelectedStyle(e.target.value),\n          className: \"w-full border rounded px-3 py-2\",\n          children: swimmingStyles.map(style => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: style.name,\n            children: style.name\n          }, style.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block font-medium mb-1\",\n          children: \"Distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedDistance,\n          onChange: e => setSelectedDistance(Number(e.target.value)),\n          className: \"w-full border rounded px-3 py-2\",\n          children: (_swimmingStyles$find = swimmingStyles.find(s => s.name === selectedStyle)) === null || _swimmingStyles$find === void 0 ? void 0 : _swimmingStyles$find.distances.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: d,\n            children: [d, \"m\"]\n          }, d, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), selectedStyle === 'Quatre Nages' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\",\n      children: (selectedDistance === 200 ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m'] : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m']).map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block font-medium mb-1\",\n          children: field.replace(/(50m|100m)/, ' $1').replace(/([a-z])([A-Z])/g, '$1 $2')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          min: \"0\",\n          value: medleyTimes[field],\n          onChange: e => handleMedleyTimeChange(field, e.target.value),\n          className: \"w-full border rounded px-3 py-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)]\n      }, field, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block font-medium mb-1\",\n        children: \"Meilleur temps 50m (en secondes)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        min: \"0\",\n        value: bestTime50m,\n        onChange: e => setBestTime50m(e.target.value),\n        className: \"w-full border rounded px-3 py-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculatePredictions,\n      className: \"mb-6 w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\",\n      children: \"Voir mes performances pr\\xE9visionnelles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-600 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }, this), totalTime && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 p-4 bg-blue-50 rounded-lg text-blue-800 font-bold text-xl\",\n      children: [\"Temps total estim\\xE9 : \", totalTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this), predictions.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-4 rounded-lg mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-4\",\n          children: \"Temps interm\\xE9diaires\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-4 gap-4\",\n          children: predictions.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white p-3 rounded shadow text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-600\",\n              children: p.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-800 font-semibold text-lg\",\n              children: p.timeFormatted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this)]\n          }, p.label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-4\",\n          children: \"Graphique d'allure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 800,\n          height: 300,\n          data: predictions,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tickFormatter: formatTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => formatTime(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"time\",\n            stroke: \"#2563eb\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(SwimmingPerformancePredictor, \"sy5nG1PZ4GugLHY7Aq7cGu4Oftk=\");\n_c = SwimmingPerformancePredictor;\nexport default SwimmingPerformancePredictor;\nvar _c;\n$RefreshReg$(_c, \"SwimmingPerformancePredictor\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Timer","Info","jsxDEV","_jsxDEV","Fragment","_Fragment","swimmingStyles","name","distances","formatTime","timeInSeconds","minutes","Math","floor","seconds","centiseconds","round","toString","padStart","addFinalPercentage","time","calculatePredictedTimes","style","distance","bestTime50m","medleyTimes","predictions","time50m","time100m","getMedleyLaps","times","map","dist","index","label","lapTime","length","timeFormatted","laps","parseFloat","butterfly50m","backstroke50m","breaststroke50m","freestyle50m","butterfly100m","backstroke100m","breaststroke100m","freestyle100m","standardLaps","lapCount","additions","add","i","lap","Array","fill","calculateTotalTime","reduce","acc","p","SwimmingPerformancePredictor","_s","_swimmingStyles$find","selectedStyle","setSelectedStyle","selectedDistance","setSelectedDistance","setBestTime50m","setMedleyTimes","setPredictions","totalTime","setTotalTime","error","setError","find","s","handleMedleyTimeChange","field","value","prev","calculatePredictions","newPredictions","some","isNaN","time50","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","Number","d","replace","type","step","min","onClick","width","height","data","strokeDasharray","dataKey","tickFormatter","formatter","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx"],"sourcesContent":["/**\n * üá¨üáß Swimming Performance Predictor for different strokes and distances\n * üá´üá∑ Pr√©dicteur de performance en natation selon la nage et la distance\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Timer, Info } from 'lucide-react';\n\n// üèä‚Äç‚ôÇÔ∏è Styles de nage et distances disponibles\nconst swimmingStyles = [\n  { name: 'Crawl', distances: [100, 200, 400, 800, 1500] },\n  { name: 'Papillon', distances: [100, 200] },\n  { name: 'Brasse', distances: [100, 200] },\n  { name: 'Dos', distances: [100, 200] },\n  { name: 'Quatre Nages', distances: [200, 400] },\n];\n\n// ‚è±Ô∏è Formater un temps en secondes vers mm:ss.cc\nconst formatTime = (timeInSeconds) => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round((timeInSeconds % 1) * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\n\n// ‚ûï Appliquer le coefficient final √† la derni√®re longueur\nconst addFinalPercentage = (time) => time * 1.049;\n\n/**\n * üá¨üáß Calculates predicted lap times based on input data\n * üá´üá∑ Calcule les temps de passage pr√©visionnels selon la nage et la distance\n */\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n\n  const time100m = addFinalPercentage((time50m + 1.5) + (time50m + 2.49));\n\n  if (style === 'Quatre Nages' && medleyTimes) {\n    const getMedleyLaps = (distances, times) => {\n      return distances.map((dist, index) => {\n        const label = `${dist.style} ${index + 1}${index === 0 ? 'er' : '√®me'} ${distance === 200 ? '50m' : '100m'}`;\n        const lapTime = index === distances.length - 1 ? addFinalPercentage(dist.time) : dist.time;\n        return {\n          distance: (index + 1) * (distance === 200 ? 50 : 100),\n          time: lapTime,\n          timeFormatted: formatTime(lapTime),\n          label\n        };\n      });\n    };\n\n    if (distance === 200) {\n      const laps = [\n        { style: 'Papillon', time: parseFloat(medleyTimes.butterfly50m) + 2.2 },\n        { style: 'Dos', time: parseFloat(medleyTimes.backstroke50m) + 3.09 },\n        { style: 'Brasse', time: parseFloat(medleyTimes.breaststroke50m) + 5.59 },\n        { style: 'Crawl', time: parseFloat(medleyTimes.freestyle50m) + 5.09 },\n      ];\n      return getMedleyLaps(laps);\n    }\n\n    if (distance === 400) {\n      const laps = [\n        { style: 'Papillon', time: parseFloat(medleyTimes.butterfly100m) + 3.2 },\n        { style: 'Dos', time: parseFloat(medleyTimes.backstroke100m) + 6.19 },\n        { style: 'Brasse', time: parseFloat(medleyTimes.breaststroke100m) + 6 },\n        { style: 'Crawl', time: parseFloat(medleyTimes.freestyle100m) + 8.97 },\n      ];\n      return getMedleyLaps(laps);\n    }\n  }\n\n  // Autres styles de nage\n  if (style === 'Crawl' || style === 'Papillon' || style === 'Brasse' || style === 'Dos') {\n    const standardLaps = (dist, lapCount, additions) => {\n      return additions.map((add, i) => {\n        const lap = {\n          distance: dist === 50 ? (i + 1) * 50 : (i + 1) * 100,\n          time: i === additions.length - 1 ? addFinalPercentage(time50m + add) : time50m + add,\n        };\n        return {\n          ...lap,\n          timeFormatted: formatTime(lap.time),\n          label: `${i + 1}${i === 0 ? 'er' : '√®me'} ${dist === 50 ? '50m' : '100m'}`\n        };\n      });\n    };\n\n    if (distance === 100) return standardLaps(50, 2, [1.5, 2.49]);\n    if (distance === 200) return standardLaps(50, 4, [2.5, 4.13, 4.53, 2.57]);\n    if (distance === 400) return standardLaps(100, 4, [4.5, 6.13, 6, 2.59]);\n    if (distance === 800) return standardLaps(100, 8, [4.5, ...Array(6).fill(6.13), 5]);\n    if (distance === 1500) return standardLaps(100, 15, [5, ...Array(13).fill(7), 6.5]);\n  }\n\n  return predictions;\n};\n\n// üßÆ Additionner les temps interm√©diaires\nconst calculateTotalTime = (predictions) => {\n  return predictions.reduce((acc, p) => acc + p.time, 0);\n};\n\n/**\n * üá¨üáß Main component for the swimming predictor interface\n * üá´üá∑ Composant principal de pr√©diction de performance natation\n */\nconst SwimmingPerformancePredictor = () => {\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: '',\n  });\n  const [predictions, setPredictions] = useState([]);\n  const [totalTime, setTotalTime] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({ ...prev, [field]: value }));\n  };\n\n  const calculatePredictions = () => {\n    setError('');\n    let newPredictions = [];\n\n    if (selectedStyle === 'Quatre Nages') {\n      const times = selectedDistance === 200\n        ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m']\n        : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m'];\n\n      if (times.some(field => !medleyTimes[field] || isNaN(parseFloat(medleyTimes[field])))) {\n        setError('Veuillez entrer tous les temps n√©cessaires pour le quatre nages.');\n        return;\n      }\n\n      newPredictions = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n    } else {\n      const time50 = parseFloat(bestTime50m);\n      if (isNaN(time50) || time50 <= 0) {\n        setError('Veuillez entrer un temps valide pour le 50m.');\n        return;\n      }\n      newPredictions = calculatePredictedTimes(selectedStyle, selectedDistance, time50);\n    }\n\n    setPredictions(newPredictions);\n    setTotalTime(formatTime(calculateTotalTime(newPredictions)));\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\n      <div className=\"flex items-center gap-2 mb-6\">\n        <Timer className=\"w-6 h-6 text-blue-600\" />\n        <h1 className=\"text-2xl font-bold text-gray-800\">Pr√©dicteur de Performance en Natation</h1>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        <div>\n          <label className=\"block font-medium mb-1\">Style de nage</label>\n          <select\n            value={selectedStyle}\n            onChange={(e) => setSelectedStyle(e.target.value)}\n            className=\"w-full border rounded px-3 py-2\"\n          >\n            {swimmingStyles.map(style => (\n              <option key={style.name} value={style.name}>{style.name}</option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block font-medium mb-1\">Distance</label>\n          <select\n            value={selectedDistance}\n            onChange={(e) => setSelectedDistance(Number(e.target.value))}\n            className=\"w-full border rounded px-3 py-2\"\n          >\n            {swimmingStyles.find(s => s.name === selectedStyle)?.distances.map(d => (\n              <option key={d} value={d}>{d}m</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {selectedStyle === 'Quatre Nages' ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n          {(selectedDistance === 200 ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m']\n           : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m']\n          ).map(field => (\n            <div key={field}>\n              <label className=\"block font-medium mb-1\">\n                {field.replace(/(50m|100m)/, ' $1').replace(/([a-z])([A-Z])/g, '$1 $2')}\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={medleyTimes[field]}\n                onChange={(e) => handleMedleyTimeChange(field, e.target.value)}\n                className=\"w-full border rounded px-3 py-2\"\n              />\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"mb-6\">\n          <label className=\"block font-medium mb-1\">Meilleur temps 50m (en secondes)</label>\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            min=\"0\"\n            value={bestTime50m}\n            onChange={(e) => setBestTime50m(e.target.value)}\n            className=\"w-full border rounded px-3 py-2\"\n          />\n        </div>\n      )}\n\n      <button\n        onClick={calculatePredictions}\n        className=\"mb-6 w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\"\n      >\n        Voir mes performances pr√©visionnelles\n      </button>\n\n      {error && <div className=\"text-red-600 mb-4\">{error}</div>}\n\n      {totalTime && (\n        <div className=\"mb-6 p-4 bg-blue-50 rounded-lg text-blue-800 font-bold text-xl\">\n          Temps total estim√© : {totalTime}\n        </div>\n      )}\n\n      {predictions.length > 0 && (\n        <>\n          <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Temps interm√©diaires</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {predictions.map(p => (\n                <div key={p.label} className=\"bg-white p-3 rounded shadow text-center\">\n                  <div className=\"text-gray-600\">{p.label}</div>\n                  <div className=\"text-blue-800 font-semibold text-lg\">{p.timeFormatted}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h2 className=\"text-lg font-semibold mb-4\">Graphique d'allure</h2>\n            <LineChart width={800} height={300} data={predictions}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"label\" />\n              <YAxis tickFormatter={formatTime} />\n              <Tooltip formatter={(value) => formatTime(value)} />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"time\" stroke=\"#2563eb\" strokeWidth={2} />\n            </LineChart>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SwimmingPerformancePredictor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}