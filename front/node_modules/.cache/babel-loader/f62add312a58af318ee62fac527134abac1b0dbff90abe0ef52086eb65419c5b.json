{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx\",\n  _s = $RefreshSig$();\n/**\n * ðŸ‡¬ðŸ‡§ Swimming Performance Predictor with Bootstrap styling.\n * ðŸ‡«ðŸ‡· PrÃ©dicteur de performance en natation avec style Bootstrap.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../../components/template/Header';\nimport Footer from '../../components/template/Footer';\nimport { FaStopwatch, FaInfoCircle } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst swimmingStyles = [{\n  name: 'Crawl',\n  distances: [100, 200, 400, 800, 1500]\n}, {\n  name: 'Papillon',\n  distances: [100, 200]\n}, {\n  name: 'Brasse',\n  distances: [100, 200]\n}, {\n  name: 'Dos',\n  distances: [100, 200]\n}, {\n  name: 'Quatre Nages',\n  distances: [200, 400]\n}];\nconst formatTime = timeInSeconds => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round(timeInSeconds % 1 * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\nconst addFinalPercentage = time => time * 1.049;\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n  const time100m = addFinalPercentage(time50m + 1.5 + (time50m + 2.49));\n  switch (style) {\n    case 'Quatre Nages':\n      const laps = [];\n      if (distance === 200 && medleyTimes) {\n        laps.push({\n          style: 'Papillon',\n          time: parseFloat(medleyTimes.butterfly50m) + 2.2\n        }, {\n          style: 'Dos',\n          time: parseFloat(medleyTimes.backstroke50m) + 3.09\n        }, {\n          style: 'Brasse',\n          time: parseFloat(medleyTimes.breaststroke50m) + 5.59\n        }, {\n          style: 'Crawl',\n          time: parseFloat(medleyTimes.freestyle50m) + 5.09\n        });\n      } else if (distance === 400 && medleyTimes) {\n        laps.push({\n          style: 'Papillon',\n          time: parseFloat(medleyTimes.butterfly100m) + 3.2\n        }, {\n          style: 'Dos',\n          time: parseFloat(medleyTimes.backstroke100m) + 6.19\n        }, {\n          style: 'Brasse',\n          time: parseFloat(medleyTimes.breaststroke100m) + 6\n        }, {\n          style: 'Crawl',\n          time: parseFloat(medleyTimes.freestyle100m) + 8.97\n        });\n      }\n      laps.forEach((lap, index) => {\n        const final = index === laps.length - 1;\n        const time = final ? addFinalPercentage(lap.time) : lap.time;\n        predictions.push({\n          distance: (index + 1) * (distance === 400 ? 100 : 50),\n          time,\n          timeFormatted: formatTime(time),\n          label: `${lap.style} ${index + 1}${index === 0 ? 'er' : 'Ã¨me'} ${distance === 400 ? '100m' : '50m'}`\n        });\n      });\n      break;\n    default:\n      if (distance === 100) {\n        predictions.push({\n          distance: 50,\n          time: time50m + 1.5,\n          timeFormatted: formatTime(time50m + 1.5),\n          label: '1er 50m'\n        }, {\n          distance: 100,\n          time: addFinalPercentage(time50m + 2.49),\n          timeFormatted: formatTime(addFinalPercentage(time50m + 2.49)),\n          label: '2Ã¨me 50m'\n        });\n      } else if (distance === 200) {\n        [2.5, 4.13, 4.53, 2.57].forEach((t, i) => {\n          const lapTime = time50m + t;\n          const isLast = i === 3;\n          const time = isLast ? addFinalPercentage(lapTime) : lapTime;\n          predictions.push({\n            distance: (i + 1) * 50,\n            time,\n            timeFormatted: formatTime(time),\n            label: `${i + 1}${i === 0 ? 'er' : 'Ã¨me'} 50m`\n          });\n        });\n      } else if (distance === 400) {\n        [4.5, 6.13, 6, 2.59].forEach((add, i) => {\n          const lapTime = time100m + add;\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === 3 ? addFinalPercentage(lapTime) : lapTime,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(lapTime) : lapTime),\n            label: `${i + 1}${i === 0 ? 'er' : 'Ã¨me'} 100m`\n          });\n        });\n      }\n      break;\n  }\n  return predictions;\n};\nconst calculateTotalTime = predictions => {\n  return predictions.reduce((total, pred) => total + pred.time, 0);\n};\nconst SwimmingPerformancePredictor = () => {\n  _s();\n  var _swimmingStyles$find;\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [distance, setDistance] = useState(100);\n  const [predictions, setPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [totalTime, setTotalTime] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: ''\n  });\n  const handleCalculate = () => {\n    if (selectedStyle === 'Quatre Nages') {\n      const keys = selectedDistance === 200 ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m'] : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m'];\n      const valid = keys.every(key => medleyTimes[key] && !isNaN(parseFloat(medleyTimes[key])));\n      if (!valid) {\n        setError(`Veuillez entrer tous les temps pour le ${selectedDistance}m Quatre Nages`);\n        return;\n      }\n      const preds = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n      setPredictions(preds);\n      setTotalTime(formatTime(calculateTotalTime(preds)));\n      setError('');\n      return;\n    }\n    const time = parseFloat(bestTime50m);\n    if (isNaN(time) || time <= 0) {\n      setError('Veuillez entrer un temps valide pour le 50m.');\n      return;\n    }\n    const preds = calculatePredictedTimes(selectedStyle, distance, time);\n    setPredictions(preds);\n    setTotalTime(formatTime(calculateTotalTime(preds)));\n    setError('');\n  };\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n      setDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container my-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"d-flex align-items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(FaStopwatch, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), \" Pr\\xE9dicteur de Performance Natation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-info d-flex align-items-start mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(FaInfoCircle, {\n            className: \"me-2 mt-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Cet outil estime vos temps interm\\xE9diaires sur diff\\xE9rentes distances \\xE0 partir de votre temps 50m ou des temps pour chaque nage.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 p-4 bg-amber-50 rounded-lg border border-amber-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-2 mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Info, {\n            className: \"w-5 h-5 text-amber-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold text-amber-900\",\n            children: \"Notes Importantes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc list-inside space-y-2 text-amber-900\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Ces formules sont des estimations et peuvent varier en fonction des nageurs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Elles supposent une progression constante et une endurance adapt\\xE9e \\xE0 chaque distance et chaque nage.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Ces formules sont tr\\xE8s utiles pour les entra\\xEEneurs et les nageurs pour estimer les temps de course en fonction des performances pass\\xE9es.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Il est important de noter que pour le quatre nages, les calculs sont bas\\xE9s sur les temps des 50m ou 100m de chaque nage, selon la distance totale du quatre nages.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"row g-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Style de nage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            value: selectedStyle,\n            onChange: e => setSelectedStyle(e.target.value),\n            children: swimmingStyles.map(style => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: style.name,\n              children: style.name\n            }, style.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Distance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            value: distance,\n            onChange: e => setDistance(parseInt(e.target.value)),\n            children: (_swimmingStyles$find = swimmingStyles.find(s => s.name === selectedStyle)) === null || _swimmingStyles$find === void 0 ? void 0 : _swimmingStyles$find.distances.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: d,\n              children: [d, \"m\"]\n            }, d, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), selectedStyle === 'Quatre Nages' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: Object.entries(medleyTimes).filter(([key]) => key.includes(distance === 200 ? '50m' : '100m')).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: key.replace(/([a-z])([A-Z])/g, '$1 $2')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"form-control\",\n              value: value,\n              onChange: e => handleMedleyTimeChange(key, e.target.value),\n              min: \"0\",\n              step: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 19\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Temps 50m (en secondes)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: bestTime50m,\n            onChange: e => setBestTime50m(e.target.value),\n            min: \"0\",\n            step: \"0.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary w-100\",\n            onClick: handleCalculate,\n            children: \"Calculer mes temps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-3\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 19\n      }, this), totalTime && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success mt-3\",\n        children: [\"Temps total estim\\xE9 : \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: totalTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"D\\xE9tail des temps interm\\xE9diaires\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-bordered text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"table-light\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Fraction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Temps (format\\xE9)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Temps brut (sec)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: predictions.map((p, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: p.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: p.timeFormatted\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: p.time.toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SwimmingPerformancePredictor, \"iop0zChqXPkQZe62+NGn4ZESG0o=\");\n_c = SwimmingPerformancePredictor;\nexport default SwimmingPerformancePredictor;\nvar _c;\n$RefreshReg$(_c, \"SwimmingPerformancePredictor\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","FaStopwatch","FaInfoCircle","jsxDEV","_jsxDEV","Fragment","_Fragment","swimmingStyles","name","distances","formatTime","timeInSeconds","minutes","Math","floor","seconds","centiseconds","round","toString","padStart","addFinalPercentage","time","calculatePredictedTimes","style","distance","bestTime50m","medleyTimes","predictions","time50m","time100m","laps","push","parseFloat","butterfly50m","backstroke50m","breaststroke50m","freestyle50m","butterfly100m","backstroke100m","breaststroke100m","freestyle100m","forEach","lap","index","final","length","timeFormatted","label","t","i","lapTime","isLast","add","calculateTotalTime","reduce","total","pred","SwimmingPerformancePredictor","_s","_swimmingStyles$find","selectedStyle","setSelectedStyle","selectedDistance","setSelectedDistance","setBestTime50m","setDistance","setPredictions","error","setError","totalTime","setTotalTime","setMedleyTimes","handleCalculate","keys","valid","every","key","isNaN","preds","find","s","handleMedleyTimeChange","field","value","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Info","onChange","e","target","map","parseInt","d","Object","entries","filter","includes","replace","type","min","step","onClick","p","toFixed","_c","$RefreshReg$"],"sources":["/Users/mac/Downloads/APP_NS_V1/dev_projet/sauvegardegit/front/src/pages/gadgets/SwimmingPerformancePredictor.jsx"],"sourcesContent":["/**\n * ðŸ‡¬ðŸ‡§ Swimming Performance Predictor with Bootstrap styling.\n * ðŸ‡«ðŸ‡· PrÃ©dicteur de performance en natation avec style Bootstrap.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../../components/template/Header';\nimport Footer from '../../components/template/Footer';\nimport { FaStopwatch, FaInfoCircle } from 'react-icons/fa';\n\nconst swimmingStyles = [\n  { name: 'Crawl', distances: [100, 200, 400, 800, 1500] },\n  { name: 'Papillon', distances: [100, 200] },\n  { name: 'Brasse', distances: [100, 200] },\n  { name: 'Dos', distances: [100, 200] },\n  { name: 'Quatre Nages', distances: [200, 400] },\n];\n\nconst formatTime = (timeInSeconds) => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = Math.floor(timeInSeconds % 60);\n  const centiseconds = Math.round((timeInSeconds % 1) * 100);\n  return `${minutes}:${seconds.toString().padStart(2, '0')}.${centiseconds.toString().padStart(2, '0')}`;\n};\n\nconst addFinalPercentage = (time) => time * 1.049;\n\nconst calculatePredictedTimes = (style, distance, bestTime50m, medleyTimes) => {\n  const predictions = [];\n  const time50m = bestTime50m;\n  const time100m = addFinalPercentage((time50m + 1.5) + (time50m + 2.49));\n\n  switch (style) {\n    case 'Quatre Nages':\n      const laps = [];\n      if (distance === 200 && medleyTimes) {\n        laps.push(\n          { style: 'Papillon', time: parseFloat(medleyTimes.butterfly50m) + 2.2 },\n          { style: 'Dos', time: parseFloat(medleyTimes.backstroke50m) + 3.09 },\n          { style: 'Brasse', time: parseFloat(medleyTimes.breaststroke50m) + 5.59 },\n          { style: 'Crawl', time: parseFloat(medleyTimes.freestyle50m) + 5.09 }\n        );\n      } else if (distance === 400 && medleyTimes) {\n        laps.push(\n          { style: 'Papillon', time: parseFloat(medleyTimes.butterfly100m) + 3.2 },\n          { style: 'Dos', time: parseFloat(medleyTimes.backstroke100m) + 6.19 },\n          { style: 'Brasse', time: parseFloat(medleyTimes.breaststroke100m) + 6 },\n          { style: 'Crawl', time: parseFloat(medleyTimes.freestyle100m) + 8.97 }\n        );\n      }\n\n      laps.forEach((lap, index) => {\n        const final = index === laps.length - 1;\n        const time = final ? addFinalPercentage(lap.time) : lap.time;\n        predictions.push({\n          distance: (index + 1) * (distance === 400 ? 100 : 50),\n          time,\n          timeFormatted: formatTime(time),\n          label: `${lap.style} ${index + 1}${index === 0 ? 'er' : 'Ã¨me'} ${distance === 400 ? '100m' : '50m'}`\n        });\n      });\n      break;\n\n    default:\n      if (distance === 100) {\n        predictions.push(\n          { distance: 50, time: time50m + 1.5, timeFormatted: formatTime(time50m + 1.5), label: '1er 50m' },\n          { distance: 100, time: addFinalPercentage(time50m + 2.49), timeFormatted: formatTime(addFinalPercentage(time50m + 2.49)), label: '2Ã¨me 50m' }\n        );\n      } else if (distance === 200) {\n        [2.5, 4.13, 4.53, 2.57].forEach((t, i) => {\n          const lapTime = time50m + t;\n          const isLast = i === 3;\n          const time = isLast ? addFinalPercentage(lapTime) : lapTime;\n          predictions.push({\n            distance: (i + 1) * 50,\n            time,\n            timeFormatted: formatTime(time),\n            label: `${i + 1}${i === 0 ? 'er' : 'Ã¨me'} 50m`\n          });\n        });\n      } else if (distance === 400) {\n        [4.5, 6.13, 6, 2.59].forEach((add, i) => {\n          const lapTime = time100m + add;\n          predictions.push({\n            distance: (i + 1) * 100,\n            time: i === 3 ? addFinalPercentage(lapTime) : lapTime,\n            timeFormatted: formatTime(i === 3 ? addFinalPercentage(lapTime) : lapTime),\n            label: `${i + 1}${i === 0 ? 'er' : 'Ã¨me'} 100m`\n          });\n        });\n      }\n      break;\n  }\n\n  return predictions;\n};\n\nconst calculateTotalTime = (predictions) => {\n  return predictions.reduce((total, pred) => total + pred.time, 0);\n};\n\nconst SwimmingPerformancePredictor = () => {\n  const [selectedStyle, setSelectedStyle] = useState(swimmingStyles[0].name);\n  const [selectedDistance, setSelectedDistance] = useState(swimmingStyles[0].distances[0]);\n  const [bestTime50m, setBestTime50m] = useState('');\n  const [distance, setDistance] = useState(100);\n  const [predictions, setPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [totalTime, setTotalTime] = useState('');\n  const [medleyTimes, setMedleyTimes] = useState({\n    butterfly50m: '',\n    backstroke50m: '',\n    breaststroke50m: '',\n    freestyle50m: '',\n    butterfly100m: '',\n    backstroke100m: '',\n    breaststroke100m: '',\n    freestyle100m: '',\n  });\n\n  const handleCalculate = () => {\n    if (selectedStyle === 'Quatre Nages') {\n      const keys = selectedDistance === 200\n        ? ['butterfly50m', 'backstroke50m', 'breaststroke50m', 'freestyle50m']\n        : ['butterfly100m', 'backstroke100m', 'breaststroke100m', 'freestyle100m'];\n\n      const valid = keys.every(key => medleyTimes[key] && !isNaN(parseFloat(medleyTimes[key])));\n      if (!valid) {\n        setError(`Veuillez entrer tous les temps pour le ${selectedDistance}m Quatre Nages`);\n        return;\n      }\n\n      const preds = calculatePredictedTimes(selectedStyle, selectedDistance, 0, medleyTimes);\n      setPredictions(preds);\n      setTotalTime(formatTime(calculateTotalTime(preds)));\n      setError('');\n      return;\n    }\n\n    const time = parseFloat(bestTime50m);\n    if (isNaN(time) || time <= 0) {\n      setError('Veuillez entrer un temps valide pour le 50m.');\n      return;\n    }\n\n    const preds = calculatePredictedTimes(selectedStyle, distance, time);\n    setPredictions(preds);\n    setTotalTime(formatTime(calculateTotalTime(preds)));\n    setError('');\n  };\n\n  useEffect(() => {\n    const style = swimmingStyles.find(s => s.name === selectedStyle);\n    if (style) {\n      setSelectedDistance(style.distances[0]);\n      setDistance(style.distances[0]);\n    }\n  }, [selectedStyle]);\n\n  const handleMedleyTimeChange = (field, value) => {\n    setMedleyTimes(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <>\n      <Header />\n      <main className=\"container my-5\">\n        <div className=\"mb-4\">\n          <h2 className=\"d-flex align-items-center gap-2\">\n            <FaStopwatch /> PrÃ©dicteur de Performance Natation\n          </h2>\n          <div className=\"alert alert-info d-flex align-items-start mt-2\">\n            <FaInfoCircle className=\"me-2 mt-1\" />\n            <div>\n              Cet outil estime vos temps intermÃ©diaires sur diffÃ©rentes distances Ã  partir de votre temps 50m ou des temps pour chaque nage.\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mb-6 p-4 bg-amber-50 rounded-lg border border-amber-200\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Info className=\"w-5 h-5 text-amber-600\" />\n          <h2 className=\"text-lg font-semibold text-amber-900\">Notes Importantes</h2>\n        </div>\n        <ul className=\"list-disc list-inside space-y-2 text-amber-900\">\n          <li>Ces formules sont des estimations et peuvent varier en fonction des nageurs.</li>\n          <li>Elles supposent une progression constante et une endurance adaptÃ©e Ã  chaque distance et chaque nage.</li>\n          <li>Ces formules sont trÃ¨s utiles pour les entraÃ®neurs et les nageurs pour estimer les temps de course en fonction des performances passÃ©es.</li>\n          <li>Il est important de noter que pour le quatre nages, les calculs sont basÃ©s sur les temps des 50m ou 100m de chaque nage, selon la distance totale du quatre nages.</li>\n        </ul>\n      </div>\n\n        <form className=\"row g-3\">\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Style de nage</label>\n            <select className=\"form-select\" value={selectedStyle} onChange={(e) => setSelectedStyle(e.target.value)}>\n              {swimmingStyles.map(style => (\n                <option key={style.name} value={style.name}>{style.name}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Distance</label>\n            <select className=\"form-select\" value={distance} onChange={(e) => setDistance(parseInt(e.target.value))}>\n              {swimmingStyles.find(s => s.name === selectedStyle)?.distances.map(d => (\n                <option key={d} value={d}>{d}m</option>\n              ))}\n            </select>\n          </div>\n\n          {selectedStyle === 'Quatre Nages' ? (\n            <>\n              {Object.entries(medleyTimes)\n                .filter(([key]) => key.includes(distance === 200 ? '50m' : '100m'))\n                .map(([key, value]) => (\n                  <div className=\"col-md-3\" key={key}>\n                    <label className=\"form-label\">{key.replace(/([a-z])([A-Z])/g, '$1 $2')}</label>\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      value={value}\n                      onChange={(e) => handleMedleyTimeChange(key, e.target.value)}\n                      min=\"0\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                ))}\n            </>\n          ) : (\n            <div className=\"col-12\">\n              <label className=\"form-label\">Temps 50m (en secondes)</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={bestTime50m}\n                onChange={(e) => setBestTime50m(e.target.value)}\n                min=\"0\"\n                step=\"0.01\"\n              />\n            </div>\n          )}\n\n          <div className=\"col-12\">\n            <button type=\"button\" className=\"btn btn-primary w-100\" onClick={handleCalculate}>\n              Calculer mes temps\n            </button>\n          </div>\n        </form>\n\n        {error && <div className=\"alert alert-danger mt-3\">{error}</div>}\n\n        {totalTime && (\n          <div className=\"alert alert-success mt-3\">\n            Temps total estimÃ© : <strong>{totalTime}</strong>\n          </div>\n        )}\n\n        {predictions.length > 0 && (\n          <div className=\"card mt-4\">\n            <div className=\"card-header\">DÃ©tail des temps intermÃ©diaires</div>\n            <div className=\"card-body\">\n              <table className=\"table table-bordered text-center\">\n                <thead className=\"table-light\">\n                  <tr>\n                    <th>Fraction</th>\n                    <th>Temps (formatÃ©)</th>\n                    <th>Temps brut (sec)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {predictions.map((p, index) => (\n                    <tr key={index}>\n                      <td>{p.label}</td>\n                      <td><strong>{p.timeFormatted}</strong></td>\n                      <td>{p.time.toFixed(2)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default SwimmingPerformancePredictor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}